# -- coding: utf-8 --
# @Time : 2021/3/27 20:40
# @Author : HUANG XUYANG
# @Email : xhuang032@e.ntu.edu.sg
# @File : RVFL.py
# @Software: PyCharm

import numpy as np
import sklearn.datasets as sk_dataset
import math
import matplotlib.pyplot as plt
from sklearn.naive_bayes import GaussianNB
import seaborn as sns
from collections import Counter, defaultdict
from minepy import MINE
import pandas as pd
import operator
import datetime
import time
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import MinMaxScaler
from itertools import combinations
from sklearn.metrics import mutual_info_score
from sklearn import metrics
import  sklearn.preprocessing as pre_processing
from sklearn.impute import  SimpleImputer
from numpy import random

num_nides = 10  # Number of enhancement nodes.
regular_para = 1  # Regularization parameter.
weight_random_range = [-1, 1]  # Range of random weights.
bias_random_range = [0, 1]  # Range of random weights.


class NBC_RVFL:
    """A simple RVFL classifier.

    Attributes:
        n_nodes: An integer of enhancement node number.
        lam: A floating number of regularization parameter.
        w_random_vec_range: A list, [min, max], the range of generating random weights.
        b_random_vec_range: A list, [min, max], the range of generating random bias.
        random_weights: A Numpy array shape is [n_feature, n_nodes], weights of neuron.
        random_bias: A Numpy array shape is [n_nodes], bias of neuron.
        beta: A Numpy array shape is [n_feature + n_nodes, n_class], the projection matrix.
        activation: A string of activation name.
        data_std: A list, store normalization parameters for each layer.
        data_mean: A list, store normalization parameters for each layer.
        same_feature: A bool, the true means all the features have same meaning and boundary for example: images.
    """

    def __init__(self, n_nodes, lam, w_random_vec_range, b_random_vec_range, activation, same_feature = False):

        self.smooth = 1  # 贝叶斯估计方法的平滑参数smooth=1，当smooth=0时即为最大似然估计
        self.p_prior = {}  # 先验概率
        self.p_condition = defaultdict(float)  # 条件概率
        self.AttributeIC = {}
        self.Wi = []
        self.AttributeW = defaultdict(float)
        self.AttributeY = defaultdict(float)
        self.realCondition = defaultdict(float)
        self.K=0



    def train_NBC(self, vector_data, label_data):

        n_samples = label_data.shape[0]  # 计算样本数
        # 统计不同类别的样本数，并存入字典，key为类别，value为样本数
        # Counter类的目的是用来跟踪值出现的次数。以字典的键值对形式存储，其中元素作为key，其计数作为value。
        dict_label = Counter(label_data)
        K = len(dict_label)
        self.K=K
        # print(dict_label[-1])
        for key, val in dict_label.items():
            # 计算先验概率
            self.p_prior[key] = (val + self.smooth / K) / (n_samples + self.smooth)

        for dx in range(vector_data.shape[1]):
            # F(ai,c)
            nums_vd = defaultdict(int)
            # F(c)
            nums_vd1 = defaultdict(int)
            vector_dx = vector_data[:, dx]
            nums_sx = len(np.unique(vector_dx))
            for xd, y in zip(vector_dx, label_data):
                nums_vd[(xd, y)] += 1
                nums_vd1[(y)] += 1
            for key, val in nums_vd.items():
                self.p_condition[(dx, key[0], key[1])] = (val + self.smooth / nums_sx) / (
                        nums_vd1[(key[1])] + self.smooth)

    def predict_NBC(self, input_v):
        p_predict = {}
        # y为类别，p_y为每个类别的先验概率
        for y, p_y in self.p_prior.items():
            p = p_y  # 计算每种后验概率
            for d, v in enumerate(input_v):  # 0 2 1 0 0 2 1 0
                # print(d, v)
                p *= self.p_condition[(d, v, y)]
            p_predict[y] = p
        NBC_pro=[]
        for i in range(self.K):
            NBC_pro.append(p_predict[i+1])
        NBC_pro=np.array(NBC_pro)
        if np.all(NBC_pro==0):
            NBC_pro[NBC_pro==0]=0.25
        print(NBC_pro)
        NBC_pro=NBC_pro/np.sum(NBC_pro)
        #print(NBC_pro)
        return NBC_pro




def prepare_data(dataset, proportion):
    label = dataset[:, -1]
    data = dataset[:, :-1]

    n_class = len(set(label))

    shuffle_index = np.arange(len(label))
    np.random.shuffle(shuffle_index)

    train_number = int(proportion * len(label))
    train_index = shuffle_index[:train_number]
    # print(train_index)
    val_index = shuffle_index[train_number:]
    # print(val_index)
    return train_index, val_index



if __name__ == '__main__':
    #X = pd.read_csv('../数据集/HCV-Egy-Data.csv')
    #X = np.array(X)
    X= np.loadtxt('../数据集1/contraceptive.txt',delimiter = ',',dtype = np.str)
    #X = np.loadtxt('../数据集/contraceptive.txt')

    # 缺失值补充

    '''
    X[X == '?'] = np.nan
    imp = SimpleImputer(missing_values = np.nan, strategy = 'mean')
    SimpleImputer(add_indicator = False, copy = True, fill_value = None, missing_values = '?', strategy = 'mean',
                  verbose = 0)
    imp.fit(X)
    X = imp.transform(X)
    
    '''


    label = pre_processing.LabelEncoder()
    X[:, -1] = label.fit_transform(X[:, -1])
    print(X[:, -1])
    X = X.astype(np.float)
    print(X)


    #np.savetxt('../数据集/arrhythmia1.txt', X)

    #归一化数据集

    scaler = MinMaxScaler()
    scaler.fit(X[:,:-1])
    X[:,:-1]= scaler.transform(X[:,:-1])


    X = X.astype(np.float)
    X[:, -1] = X[:, -1] + 1.0
    m = X.shape[1] - 1
    N = X.shape[0]


    vector_data = X[:, :-1]
    label_data = X[:, -1]
    dict_label = Counter(X[:, -1])
    K = len(dict_label)
    # 贝叶斯算法离散化后
    array1 = np.zeros(shape = (0, X.shape[0]))
    for n in range(0, m):
        k = 5
        d1 = pd.cut(vector_data[:, n], k, labels = range(k))
        array1 = np.vstack((array1, d1))
    array1 = np.vstack((array1, label_data))
    X1 = array1.T

    # print(X)
    # print(X1)
    vector_data_NBC = X1[:, :-1]
    label_data_NBC = X1[:, -1]

    # my_matrix = np.loadtxt("../数据集/[010]glass(0-1).txt")
    arr_test_NBC = []
    arr_test_NBC_1 = []
    arr_test_RVFL = []
    arr_test_NBC_RVFL = []
    arr_train_NBC=[]
    roc_matrix = []
    PMSE_matrix = []
    #train_index_matrix=[[417, 285, 488, 452, 338, 205, 389, 183, 460, 312, 356, 359, 428, 485, 207, 486, 46, 15, 16, 477, 328, 242, 308, 83, 413, 197, 81, 65, 135, 93, 138, 454, 470, 55, 104, 366, 362, 9, 43, 120, 370, 304, 98, 444, 305, 332, 229, 387, 258, 85, 184, 295, 30, 181, 48, 92, 3, 234, 272, 383, 430, 23, 232, 89, 446, 239, 72, 68, 409, 350, 388, 40, 61, 373, 279, 115, 208, 114, 153, 268, 412, 219, 113, 402, 161, 397, 141, 340, 164, 192, 238, 148, 250, 210, 27, 324, 358, 311, 421, 97, 439, 267, 224, 212, 226, 142, 248, 259, 28, 42, 0, 440, 154, 102, 391, 445, 202, 380, 423, 80, 275, 143, 422, 95, 261, 425, 257, 133, 335, 329, 8, 354, 56, 374, 432, 117, 369, 411, 443, 475, 431, 32, 178, 245, 352, 79, 180, 10, 131, 249, 137, 52, 349, 111, 112, 101, 415, 269, 320, 64, 429, 22, 478, 287, 321, 217, 209, 116, 375, 198, 174, 450, 122, 438, 60, 288, 17, 348, 457, 172, 179, 342, 230, 265, 140, 254, 33, 5, 110, 407, 262, 451, 166, 158, 289, 235, 147, 365, 314, 82, 462, 26, 41, 266, 49, 280, 152, 326, 461, 263, 361, 330, 296, 466, 214, 51, 480, 309, 290, 410, 368, 126, 193, 467, 176, 223, 344, 400, 159, 50, 433, 13, 47, 456, 100, 105, 233, 307, 94, 367, 62, 482, 185, 67, 156, 319, 337, 469, 37, 146, 206, 315, 163, 376, 145, 270, 343, 1, 447, 167, 215, 71, 211, 70, 216, 39, 73, 240, 436, 317, 398, 364, 201, 327, 253, 484, 472, 87, 404, 139, 187, 300, 227, 401, 168, 175, 325, 6, 186, 169, 108, 57, 218, 177, 408, 455, 351, 127, 459, 125, 291, 20, 276, 471, 403, 38, 316, 405, 84, 91, 479, 128, 24, 220, 318, 88, 244, 170, 96, 278, 247, 78, 58, 474, 396, 281, 418, 4, 149, 426, 378, 194, 481, 2, 277, 449, 284, 353, 21, 381, 136, 165], [181, 446, 199, 110, 150, 384, 1, 164, 44, 38, 333, 282, 46, 291, 388, 306, 411, 360, 376, 68, 21, 104, 79, 57, 80, 153, 272, 324, 404, 369, 433, 193, 389, 487, 300, 159, 347, 298, 381, 45, 403, 47, 187, 313, 220, 98, 72, 106, 289, 152, 397, 422, 325, 58, 228, 409, 16, 217, 77, 156, 266, 177, 243, 488, 399, 363, 14, 385, 178, 453, 11, 339, 285, 245, 218, 235, 205, 428, 42, 93, 387, 460, 349, 53, 317, 305, 450, 253, 482, 52, 368, 417, 259, 270, 261, 200, 136, 320, 464, 348, 472, 222, 71, 465, 55, 158, 26, 269, 343, 226, 30, 240, 186, 407, 395, 19, 254, 191, 297, 82, 421, 345, 475, 241, 173, 319, 160, 176, 162, 146, 256, 251, 92, 29, 172, 239, 25, 155, 124, 383, 208, 34, 390, 442, 31, 318, 54, 211, 90, 441, 394, 64, 327, 471, 161, 36, 328, 108, 127, 76, 311, 212, 143, 314, 372, 50, 346, 43, 448, 209, 393, 206, 286, 296, 41, 224, 370, 374, 134, 246, 281, 255, 341, 61, 27, 350, 12, 113, 258, 144, 451, 447, 234, 440, 171, 406, 196, 455, 331, 468, 40, 132, 112, 481, 84, 430, 400, 405, 373, 301, 122, 142, 238, 277, 197, 7, 201, 128, 166, 88, 283, 169, 13, 449, 126, 223, 260, 131, 436, 20, 274, 179, 214, 267, 415, 121, 276, 4, 290, 362, 183, 321, 5, 275, 37, 67, 483, 48, 439, 355, 401, 95, 148, 135, 195, 382, 118, 379, 443, 107, 6, 120, 231, 303, 462, 484, 412, 352, 361, 359, 163, 366, 85, 189, 474, 326, 410, 221, 386, 307, 329, 190, 323, 78, 457, 365, 340, 250, 182, 91, 458, 97, 262, 96, 279, 105, 65, 295, 111, 265, 140, 322, 247, 219, 59, 102, 414, 147, 469, 486, 470, 312, 271, 337, 461, 175, 62, 284, 233, 299, 477, 330, 165, 99, 145, 174, 213, 185, 244, 432, 70, 123, 413, 357, 473, 423, 252, 74, 9, 268, 353, 342], [105, 124, 312, 150, 134, 421, 135, 183, 61, 410, 44, 262, 146, 247, 57, 152, 429, 382, 309, 475, 271, 487, 203, 460, 440, 13, 43, 343, 275, 360, 196, 436, 218, 315, 260, 318, 249, 310, 184, 70, 192, 277, 160, 452, 126, 142, 403, 140, 113, 336, 65, 82, 67, 478, 394, 465, 132, 86, 94, 34, 225, 6, 173, 251, 42, 48, 24, 380, 96, 319, 353, 467, 30, 161, 438, 219, 273, 357, 369, 226, 482, 189, 35, 141, 252, 207, 155, 416, 74, 453, 334, 115, 395, 330, 174, 266, 333, 446, 122, 50, 433, 253, 399, 248, 305, 469, 36, 114, 295, 213, 112, 397, 485, 430, 193, 351, 471, 279, 54, 125, 379, 221, 363, 227, 339, 349, 344, 481, 58, 237, 26, 316, 21, 296, 55, 151, 480, 15, 3, 404, 425, 210, 28, 428, 154, 52, 11, 5, 401, 303, 447, 341, 153, 109, 352, 302, 381, 390, 402, 190, 175, 412, 68, 149, 258, 346, 211, 56, 83, 85, 250, 104, 139, 435, 168, 131, 375, 230, 420, 215, 362, 121, 157, 202, 33, 270, 198, 320, 474, 204, 148, 444, 462, 322, 8, 463, 407, 9, 384, 167, 23, 449, 77, 483, 143, 426, 326, 53, 286, 278, 47, 314, 176, 422, 232, 268, 10, 356, 359, 376, 89, 229, 476, 49, 323, 299, 484, 367, 22, 338, 156, 98, 12, 216, 162, 90, 99, 137, 235, 100, 477, 136, 7, 231, 228, 441, 40, 220, 414, 38, 246, 466, 159, 269, 373, 284, 391, 102, 178, 242, 470, 282, 398, 243, 263, 458, 92, 32, 16, 241, 261, 329, 361, 62, 311, 209, 486, 185, 25, 177, 233, 264, 294, 406, 187, 245, 443, 432, 392, 133, 224, 378, 386, 171, 103, 348, 387, 18, 87, 427, 186, 163, 459, 385, 396, 27, 455, 31, 445, 342, 389, 84, 69, 223, 164, 405, 327, 290, 345, 365, 374, 301, 255, 201, 106, 280, 129, 110, 60, 182, 388, 118, 236, 287, 456, 313, 117, 180, 306, 328, 147, 238], [74, 164, 470, 404, 4, 141, 335, 286, 474, 119, 56, 341, 288, 111, 449, 305, 348, 385, 427, 320, 309, 199, 415, 343, 55, 79, 174, 30, 39, 419, 26, 392, 370, 408, 49, 307, 60, 103, 472, 299, 260, 476, 351, 269, 169, 99, 405, 59, 248, 371, 477, 365, 190, 229, 328, 32, 251, 451, 277, 37, 282, 42, 128, 280, 246, 102, 241, 257, 471, 38, 443, 303, 149, 290, 420, 211, 3, 254, 186, 171, 383, 224, 431, 262, 21, 173, 76, 274, 295, 430, 347, 460, 463, 105, 409, 454, 382, 318, 332, 464, 301, 165, 458, 154, 124, 426, 193, 344, 16, 411, 268, 108, 10, 215, 398, 48, 235, 168, 285, 223, 14, 457, 308, 360, 53, 80, 158, 300, 163, 442, 148, 89, 71, 212, 65, 135, 130, 123, 481, 68, 364, 377, 218, 400, 201, 316, 487, 69, 479, 98, 321, 77, 337, 195, 450, 313, 7, 465, 93, 338, 67, 129, 350, 133, 121, 183, 369, 315, 296, 418, 386, 219, 485, 448, 43, 203, 363, 323, 117, 208, 0, 379, 34, 192, 90, 6, 484, 488, 184, 414, 106, 63, 250, 197, 125, 35, 362, 233, 395, 265, 146, 433, 314, 258, 25, 294, 353, 252, 82, 189, 213, 255, 312, 187, 396, 54, 440, 166, 339, 249, 240, 435, 145, 142, 276, 461, 151, 390, 58, 19, 428, 373, 202, 15, 482, 86, 222, 391, 298, 412, 434, 91, 64, 87, 292, 297, 72, 480, 281, 170, 50, 136, 423, 473, 271, 272, 432, 143, 147, 120, 310, 372, 264, 275, 22, 293, 380, 326, 131, 324, 437, 45, 177, 375, 421, 62, 340, 152, 356, 70, 459, 446, 8, 361, 376, 436, 238, 322, 134, 331, 126, 78, 230, 367, 100, 302, 429, 245, 209, 329, 475, 355, 259, 325, 127, 27, 388, 24, 284, 33, 61, 368, 410, 387, 220, 311, 425, 182, 110, 469, 94, 175, 113, 51, 466, 227, 381, 263, 261, 107, 155, 44, 270, 366, 352, 231, 399, 191, 97, 342, 206, 378], [218, 216, 301, 484, 149, 320, 412, 174, 252, 16, 292, 296, 60, 0, 72, 334, 40, 162, 245, 318, 114, 426, 270, 454, 341, 400, 332, 45, 111, 428, 38, 179, 61, 445, 435, 449, 401, 187, 19, 194, 49, 136, 284, 146, 361, 403, 397, 353, 263, 56, 142, 417, 167, 380, 107, 113, 399, 369, 333, 485, 482, 89, 225, 246, 281, 472, 26, 297, 258, 383, 200, 298, 278, 408, 44, 393, 381, 183, 253, 13, 336, 310, 24, 33, 140, 127, 363, 177, 157, 46, 80, 282, 226, 15, 345, 135, 415, 264, 85, 483, 232, 42, 51, 269, 169, 34, 375, 386, 462, 208, 291, 442, 260, 430, 120, 14, 304, 164, 17, 59, 121, 374, 447, 460, 41, 477, 193, 178, 443, 392, 47, 313, 395, 221, 201, 370, 261, 102, 436, 234, 171, 254, 289, 331, 50, 3, 217, 27, 348, 52, 109, 441, 322, 427, 202, 368, 54, 429, 444, 265, 347, 104, 129, 407, 461, 488, 425, 474, 139, 30, 160, 166, 223, 365, 37, 64, 271, 153, 424, 409, 81, 231, 311, 62, 39, 471, 22, 237, 480, 20, 366, 440, 57, 74, 228, 188, 205, 65, 170, 328, 339, 63, 351, 68, 117, 165, 173, 5, 204, 360, 220, 7, 112, 137, 58, 431, 241, 93, 259, 97, 100, 274, 214, 338, 29, 198, 103, 358, 451, 143, 379, 410, 350, 388, 459, 307, 418, 422, 290, 53, 421, 185, 279, 134, 376, 294, 229, 8, 319, 236, 295, 487, 308, 32, 28, 280, 367, 359, 250, 438, 76, 31, 340, 71, 453, 478, 86, 329, 273, 83, 481, 349, 448, 95, 215, 446, 452, 249, 36, 210, 300, 256, 450, 25, 101, 470, 156, 110, 176, 335, 413, 161, 151, 6, 2, 352, 92, 23, 91, 126, 326, 432, 105, 159, 420, 235, 346, 433, 405, 227, 116, 244, 337, 287, 384, 262, 73, 9, 439, 67, 96, 468, 293, 138, 276, 394, 10, 486, 158, 99, 182, 463, 213, 479, 285, 466, 70, 150, 203, 364, 115, 465], [288, 59, 471, 371, 76, 376, 296, 200, 432, 86, 168, 482, 460, 120, 188, 479, 350, 455, 337, 175, 478, 438, 113, 330, 27, 181, 342, 431, 126, 252, 287, 196, 480, 436, 320, 31, 67, 75, 403, 166, 475, 254, 170, 442, 94, 109, 255, 273, 234, 185, 352, 245, 285, 12, 122, 449, 14, 198, 71, 298, 265, 90, 61, 65, 470, 430, 283, 313, 329, 319, 191, 221, 445, 327, 199, 300, 387, 258, 48, 215, 176, 269, 19, 487, 154, 343, 244, 142, 251, 159, 4, 275, 408, 417, 247, 146, 29, 349, 316, 223, 410, 393, 38, 180, 297, 62, 202, 277, 488, 169, 396, 274, 262, 163, 263, 328, 128, 419, 308, 145, 305, 158, 173, 119, 105, 416, 346, 55, 391, 486, 331, 132, 58, 402, 483, 344, 389, 321, 307, 222, 131, 374, 77, 203, 286, 463, 190, 68, 412, 78, 235, 112, 424, 25, 381, 95, 53, 357, 182, 468, 219, 73, 411, 242, 380, 125, 332, 100, 341, 140, 40, 205, 318, 302, 484, 171, 165, 250, 93, 238, 97, 280, 50, 226, 295, 443, 118, 325, 239, 87, 111, 151, 33, 212, 51, 267, 399, 44, 184, 197, 204, 160, 299, 15, 217, 466, 206, 360, 339, 291, 293, 193, 136, 98, 35, 351, 84, 335, 137, 256, 481, 103, 42, 63, 437, 306, 135, 385, 57, 240, 304, 284, 469, 367, 141, 243, 358, 248, 92, 373, 427, 369, 429, 213, 324, 425, 354, 24, 110, 409, 36, 183, 47, 446, 60, 194, 17, 310, 139, 237, 5, 405, 336, 366, 208, 312, 400, 20, 458, 383, 348, 70, 150, 37, 439, 144, 52, 174, 88, 138, 201, 167, 474, 253, 156, 107, 444, 214, 157, 388, 74, 386, 264, 467, 216, 210, 347, 473, 363, 268, 266, 227, 229, 426, 333, 459, 407, 85, 382, 453, 334, 3, 9, 345, 236, 155, 472, 420, 228, 124, 435, 447, 395, 21, 413, 315, 301, 370, 224, 311, 225, 179, 2, 361, 143, 279, 117, 178, 6, 46, 233, 23], [93, 454, 327, 217, 44, 246, 130, 69, 348, 416, 277, 368, 400, 370, 418, 4, 299, 398, 352, 287, 386, 259, 249, 485, 355, 444, 399, 176, 305, 301, 0, 459, 391, 231, 117, 402, 334, 234, 88, 365, 441, 15, 72, 224, 333, 211, 472, 114, 405, 127, 18, 184, 374, 480, 247, 86, 274, 192, 384, 8, 212, 395, 253, 73, 251, 189, 397, 63, 27, 276, 359, 403, 147, 442, 191, 338, 170, 278, 241, 319, 11, 31, 445, 151, 159, 477, 412, 201, 180, 330, 281, 188, 232, 104, 115, 366, 256, 285, 262, 362, 345, 254, 329, 347, 364, 242, 339, 155, 432, 452, 343, 20, 336, 121, 417, 321, 380, 367, 311, 429, 471, 152, 440, 283, 207, 296, 258, 323, 413, 194, 171, 132, 103, 98, 113, 108, 182, 40, 80, 66, 74, 161, 208, 469, 361, 235, 187, 21, 236, 293, 22, 346, 1, 9, 422, 423, 102, 449, 60, 156, 220, 203, 481, 356, 106, 229, 138, 36, 61, 284, 425, 204, 82, 373, 32, 295, 37, 407, 68, 354, 265, 145, 404, 35, 419, 190, 7, 456, 158, 30, 214, 54, 317, 383, 408, 275, 435, 288, 183, 390, 181, 50, 94, 279, 58, 453, 25, 396, 415, 458, 340, 101, 206, 166, 424, 52, 388, 57, 294, 173, 172, 164, 59, 49, 46, 252, 222, 228, 484, 149, 91, 165, 446, 479, 195, 47, 312, 237, 28, 286, 29, 478, 448, 148, 337, 273, 64, 34, 434, 205, 200, 255, 385, 461, 466, 202, 381, 221, 401, 178, 475, 289, 430, 244, 455, 185, 349, 266, 70, 62, 129, 10, 421, 260, 238, 318, 83, 230, 291, 146, 163, 13, 357, 14, 210, 420, 437, 269, 487, 157, 302, 142, 219, 328, 140, 120, 43, 17, 379, 389, 473, 122, 213, 304, 51, 438, 105, 112, 371, 42, 226, 474, 463, 133, 160, 196, 111, 56, 153, 109, 393, 6, 227, 268, 90, 409, 78, 272, 290, 324, 67, 267, 216, 476, 243, 320, 119, 353, 342, 239, 95, 124], [59, 470, 430, 7, 150, 69, 153, 265, 83, 398, 326, 221, 313, 57, 213, 235, 336, 353, 203, 354, 218, 162, 43, 388, 106, 132, 58, 68, 296, 282, 396, 85, 312, 244, 166, 439, 383, 446, 252, 359, 20, 234, 154, 440, 289, 144, 345, 366, 1, 94, 445, 297, 206, 402, 249, 485, 134, 74, 190, 44, 199, 200, 332, 292, 211, 457, 184, 293, 280, 259, 96, 323, 226, 266, 174, 148, 347, 253, 462, 51, 103, 459, 421, 186, 169, 208, 173, 483, 5, 476, 133, 158, 300, 119, 379, 412, 487, 104, 216, 105, 261, 168, 14, 46, 351, 288, 22, 246, 227, 54, 24, 118, 143, 95, 26, 159, 18, 121, 455, 303, 182, 23, 274, 340, 254, 86, 30, 192, 387, 331, 465, 239, 275, 302, 114, 98, 448, 286, 478, 395, 362, 372, 429, 217, 363, 451, 384, 450, 474, 373, 198, 116, 283, 344, 135, 317, 237, 271, 112, 100, 442, 413, 290, 405, 482, 316, 87, 279, 72, 272, 157, 374, 264, 165, 273, 403, 126, 8, 125, 10, 48, 339, 370, 257, 400, 224, 251, 163, 229, 177, 6, 361, 431, 73, 171, 127, 146, 269, 245, 267, 447, 178, 37, 314, 365, 325, 315, 41, 414, 291, 50, 32, 468, 263, 270, 376, 82, 415, 464, 185, 428, 128, 209, 355, 11, 40, 39, 55, 138, 156, 181, 136, 486, 341, 278, 438, 75, 310, 16, 248, 65, 140, 320, 472, 330, 401, 443, 207, 110, 258, 187, 219, 435, 88, 13, 167, 285, 189, 324, 124, 399, 21, 416, 196, 238, 241, 77, 102, 346, 298, 137, 256, 53, 15, 81, 467, 260, 335, 420, 423, 294, 437, 139, 36, 242, 463, 390, 488, 449, 480, 45, 441, 145, 385, 337, 364, 343, 453, 141, 377, 433, 477, 481, 425, 408, 262, 179, 409, 172, 91, 236, 358, 484, 466, 307, 367, 131, 380, 350, 151, 107, 230, 427, 255, 180, 122, 155, 47, 108, 147, 225, 333, 64, 188, 328, 9, 426, 92, 193, 201, 394, 120], [431, 168, 477, 350, 330, 370, 457, 172, 377, 304, 480, 474, 311, 148, 272, 161, 134, 364, 37, 29, 95, 340, 406, 464, 425, 335, 25, 218, 338, 156, 334, 97, 77, 435, 201, 362, 351, 213, 241, 159, 372, 279, 318, 42, 147, 263, 309, 1, 82, 113, 385, 400, 390, 126, 401, 216, 240, 305, 395, 313, 254, 354, 437, 374, 413, 253, 22, 28, 49, 391, 348, 223, 357, 466, 50, 314, 409, 120, 40, 469, 281, 157, 180, 71, 183, 271, 471, 384, 187, 60, 284, 285, 359, 295, 195, 231, 387, 207, 67, 264, 411, 247, 236, 32, 33, 252, 426, 222, 259, 462, 248, 43, 79, 46, 417, 199, 38, 191, 133, 6, 8, 450, 320, 249, 269, 410, 76, 188, 217, 276, 2, 289, 397, 230, 34, 317, 23, 266, 341, 194, 343, 80, 226, 190, 132, 154, 100, 436, 18, 13, 408, 268, 470, 171, 396, 302, 379, 416, 0, 86, 277, 30, 21, 414, 39, 87, 293, 7, 361, 445, 160, 234, 78, 308, 326, 143, 179, 337, 62, 220, 5, 55, 118, 291, 455, 355, 173, 102, 228, 27, 446, 250, 458, 447, 45, 342, 108, 24, 16, 360, 17, 63, 444, 203, 329, 44, 117, 92, 4, 224, 345, 449, 211, 430, 265, 243, 306, 433, 448, 352, 124, 487, 297, 96, 482, 460, 93, 114, 242, 14, 31, 135, 197, 404, 125, 176, 267, 57, 235, 485, 488, 280, 427, 366, 239, 442, 481, 58, 273, 262, 303, 19, 327, 210, 429, 181, 3, 310, 169, 375, 369, 11, 479, 107, 145, 315, 129, 165, 307, 186, 287, 468, 150, 325, 208, 246, 130, 353, 212, 256, 407, 301, 461, 163, 376, 75, 149, 378, 459, 200, 424, 137, 105, 103, 344, 405, 112, 15, 423, 128, 420, 251, 51, 478, 349, 392, 91, 380, 465, 323, 152, 88, 245, 64, 83, 141, 451, 177, 440, 175, 299, 164, 439, 244, 138, 116, 35, 483, 204, 296, 238, 419, 331, 142, 381, 467, 290, 174, 486, 59, 205, 358], [203, 336, 133, 198, 353, 347, 444, 295, 369, 9, 453, 131, 113, 114, 349, 169, 361, 245, 378, 288, 320, 48, 62, 149, 221, 367, 193, 459, 191, 472, 423, 264, 1, 314, 144, 409, 201, 337, 51, 334, 327, 359, 121, 445, 330, 15, 386, 176, 401, 92, 300, 460, 307, 159, 420, 205, 109, 38, 256, 316, 173, 100, 55, 259, 329, 227, 478, 181, 5, 212, 286, 452, 262, 405, 471, 304, 407, 65, 468, 35, 167, 356, 123, 244, 457, 228, 112, 128, 279, 138, 49, 419, 7, 155, 275, 25, 220, 379, 312, 81, 328, 139, 34, 184, 190, 95, 84, 463, 150, 197, 350, 389, 160, 192, 355, 125, 326, 321, 10, 297, 188, 280, 451, 246, 426, 91, 447, 357, 456, 130, 466, 252, 294, 80, 408, 166, 229, 186, 11, 26, 154, 122, 204, 383, 351, 277, 348, 406, 73, 187, 108, 354, 105, 74, 37, 439, 172, 470, 47, 39, 22, 202, 4, 284, 60, 102, 366, 189, 152, 481, 58, 87, 158, 298, 281, 57, 257, 3, 225, 2, 372, 345, 99, 115, 251, 377, 195, 331, 413, 33, 391, 66, 269, 263, 79, 387, 278, 94, 267, 88, 117, 93, 385, 29, 449, 164, 44, 127, 213, 339, 215, 106, 315, 395, 183, 416, 276, 254, 77, 23, 224, 218, 118, 36, 24, 151, 373, 319, 394, 303, 393, 170, 165, 124, 317, 219, 429, 422, 214, 333, 343, 253, 142, 174, 435, 28, 107, 479, 323, 63, 40, 59, 370, 404, 424, 417, 344, 318, 6, 111, 461, 371, 392, 265, 425, 177, 340, 486, 291, 56, 338, 443, 89, 482, 132, 135, 311, 412, 69, 145, 324, 53, 403, 46, 76, 146, 434, 83, 483, 270, 411, 196, 274, 237, 226, 469, 21, 474, 70, 465, 153, 309, 485, 179, 272, 325, 365, 260, 96, 428, 454, 140, 473, 97, 78, 230, 374, 427, 388, 302, 376, 446, 236, 147, 441, 283, 27, 488, 19, 104, 232, 271, 305, 301, 400, 341, 431, 41, 248, 71, 249, 266]]
    #val_index_matrix
    for k in range(0, 1):
        train_index, val_index = prepare_data(X, 0.7)
        '''
        train_data = vector_data_NBC[train_index_matrix[k]]
        train_label = label_data_NBC[train_index_matrix[k]]

        test_data = vector_data_NBC[val_index_matrix[k]]
        test_label = label_data_NBC[val_index_matrix[k]]
        '''
        train_data = vector_data_NBC[train_index]
        train_label = label_data_NBC[train_index]

        test_data = vector_data_NBC[val_index]
        test_label = label_data_NBC[val_index]



        NBC_classific = NBC_RVFL(num_nides, regular_para, weight_random_range, bias_random_range, 'relu', False)
        NBC_classific.train_NBC(train_data, train_label)
        temp = 0
        correct = 0
        NBC_pro_matrix_test=[]
        for x in test_data:
            NBC_pro_matrix_test.append(NBC_classific.predict_NBC(x))
        NBC_pro_matrix_train=[]
        for x in train_data:
            NBC_pro_matrix_train.append(NBC_classific.predict_NBC(x))

        result1 = np.argmax(NBC_pro_matrix_test, axis = 1)
        NBC_pro_matrix_test=np.array(NBC_pro_matrix_test)
        #print(NBC_pro_matrix_test)


        for i in range(K):
            print('均值和标准差', np.mean(NBC_pro_matrix_test[:, i]), np.std(NBC_pro_matrix_test[:, i])*0.3)
            x=random.normal(loc=np.mean(NBC_pro_matrix_test[:,i]),scale=np.std(NBC_pro_matrix_test[:,i])*0.3,size=50000)
            sns.kdeplot(x,bw = "scott",shade = True,label = "Class"+str(i+1))
        plt.legend()
        plt.show()

        '''
        sns.kdeplot(NBC_pro_matrix_test[:,0],bw = 1,shade = True,la bel = "Class1")
        sns.kdeplot(NBC_pro_matrix_test[:, 1],bw = 1, shade = True,label ="Class2")
        #sns.distplot(NBC_pro_matrix_test[:, 2], label = "Class3")
        plt.legend()
        plt.show()  
        '''

        acc1 = np.sum(np.equal(result1, test_label - 1)) / len(test_label)
        arr_test_NBC.append(acc1)

        result2=np.argmax(NBC_pro_matrix_train,axis = 1)
        acc2=np.sum(np.equal(result2,train_label-1))/len(train_label)
        arr_train_NBC.append(acc2)

        PMSE = 0
        tag = 0
        for test_num in test_label:
            matrix = [0] * K
            matrix[int(test_num - 1)] = 1
            PMSE += np.sum(np.power(NBC_pro_matrix_test[tag] - matrix, 2))
            tag += 1
        PMSE_matrix.append(PMSE / len(test_label))
        for x in NBC_pro_matrix_test:
            x=list(x)
        #print(NBC_pro_matrix_test)
        NBC_pro_matrix_test=np.array(NBC_pro_matrix_test)
        # AUC排序性能比较
        #print(test_label)
        roc = metrics.roc_auc_score(test_label.astype(np.int64), NBC_pro_matrix_test[:,1], multi_class = 'ovo')
        roc_matrix.append(roc)



        '''
        for x in test_data:

            # print(x)
            
            NBC_pro_matrix.append(NBC_classific.predict_NBC(x))
            p_predict_sorted = sorted(NBC_classific.predict_NBC(x).items(), key = operator.itemgetter(1),
                                      reverse = True)

            if p_predict_sorted[0][0] == test_label[temp]:
                correct += 1
            temp += 1
        
        for x in train_data:
            # print(x)
            p_predict_sorted = sorted(NBC_classific.predict_NBC(x).items(), key = operator.itemgetter(1),
                                      reverse = True)
            # print(p_predict_sorted)
            # print(p_predict_sorted[0][0])
            if p_predict_sorted[0][0] == train_label[temp]:
                correct += 1
                # print(p_predict_sorted[0][0], test_label[temp])
            temp += 1
        '''



    arr_mean_test = np.mean(arr_test_NBC)
    arr_std_test = np.std(arr_test_NBC, ddof = 1)
    arr_mean_train=np.mean(arr_train_NBC)
    arr_std_train=np.std(arr_train_NBC)
    roc_mean=np.mean(roc_matrix)
    roc_std=np.std(roc_matrix)
    PMSE_mean=np.mean(PMSE_matrix)
    PMSE_std=np.std(PMSE_matrix)

    # arr_mean_NBC_RVFL=np.mean(arr_test_NBC_RVFL)
    # arr_std_NBC_RVFL=np.std(arr_test_NBC_RVFL,ddof = 1)
    print(N, m)
    print("测试集平均及标准差为", arr_mean_test, arr_std_test)
    print("训练集平均及标准差为",arr_mean_train,arr_std_train)
    print("AUC平均标准差为", roc_mean, roc_std)
    print("PMSE平均标准差为", PMSE_mean, PMSE_std)
    # print("NBC-RVFL测试集平均及标准差为",arr_mean_NBC_RVFL,arr_std_NBC_RVFL)



