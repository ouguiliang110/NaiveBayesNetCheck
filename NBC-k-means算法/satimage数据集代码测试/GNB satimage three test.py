import numpy as np
import math
from sklearn.naive_bayes import GaussianNB

# 连续型数据分类用正态分布公式
def getPro(theData, mean, var):
    a=1
    if (mean == 0) & (var == 0):
        return a
    else:
        pro=1 / (math.sqrt(2 * math.pi) * math.sqrt(var)) * math.exp(-(theData - mean) ** 2 / (2 * var))
        return pro

def getRandom(num):
    Ran = np.random.dirichlet(np.ones(num), size = 1)
    Ran = Ran.flatten()
    return Ran


'''
def CountP1(test):
    sum=1
    for i in range(0,60):
       sum*=getPro(test[i],
def CountP2(test):
    sum=1
    for i in  range(0,60):
        sum*=getPro(())
'''

X = np.loadtxt('3satimage.txt',delimiter=',', dtype=np.int)
# 其中有97
m = X.shape[1] - 1  # 属性数量
n = X.shape[0]  # 样本数目
T = 3
K = 7  # 类标记数量
# 主要过程：分组
# 去掉类标记
Class1 = 0
Class2 = 0
Class3 = 0
Class4 = 0
Class5 = 0
Class6 = 0
Class7 = 0
array0 = np.zeros(shape = (0, m+1))
array1 = np.zeros(shape = (0, m+1))
array2 = np.zeros(shape = (0, m+1))
array3 = np.zeros(shape = (0, m+1))
array4 = np.zeros(shape = (0, m+1))
array5 = np.zeros(shape = (0, m+1))
for i in X:
    if i[m]==1:
        Class1=Class1+1
        array0=np.vstack((array0,i))
    elif i[m]==2:
        Class2=Class2+1
        array1=np.vstack((array1,i))
    elif i[m]==3:
        Class3=Class3+1
        array2=np.vstack((array2,i))
    elif i[m]==4:
        Class4=Class4+1
        array3=np.vstack((array3,i))
    elif i[m]==5:
        Class5=Class5+1
        array4=np.vstack((array4,i))
    elif i[m]==7:
        Class6=Class6+1
        array5=np.vstack((array5,i))
X=np.vstack((array0,array1,array2,array3,array4,array5))

train1 = int(Class1 * 0.5)
val1 = int(Class1 * 0.2)
test1 = Class1 - train1 - val1

train2 = int(Class2 * 0.5)
val2 = int(Class2 * 0.2)
test2 = Class2 - train2 - val2

train3 = int(Class3 * 0.5)
val3 = int(Class3 * 0.2)
test3 = Class3 - train3 - val3

train4 = int(Class4 * 0.5)
val4 = int(Class4 * 0.2)
test4 = Class4 - train4 - val4

train5 = int(Class5 * 0.5)
val5 = int(Class5 * 0.2)
test5 = Class5- train5 - val5

train6 = int(Class6 * 0.5)
val6 = int(Class6 * 0.2)
test6 = Class6 - train6 - val6


num2 = Class1 + Class2
num3 = Class1 + Class2 + Class3
num4 = num3 + Class4
num5 = num4 + Class5
num6 = num5 + Class6

G1=[0, 4, 8, 12, 16, 20, 24, 28, 32]
G2=[1, 5, 9, 13, 17, 21, 22, 23, 25, 29, 33]
G3=[2, 3, 6, 7, 10, 11, 14, 15, 18, 19, 26, 27, 30, 31, 34, 35]
len1=len(G1)

len2=len(G2)
len3=len(G3)
split=len1+len2+len3
#随机训练集，验证集，测试集区

idx = np.random.choice(np.arange(Class1), size = train1, replace = False)
train_index1 = np.array(idx)
val_index1 = np.random.choice(np.delete(np.arange(Class1), train_index1), size = val1, replace = False)
test_index1 = np.delete(np.arange(Class1), np.append(train_index1, val_index1))

idx1 = np.random.choice(np.arange(Class2), size = train2, replace = False)
train_index2 = np.array(idx1)
val_index2 = np.random.choice(np.delete(np.arange(Class2), train_index2), size = val2, replace = False)
test_index2 = np.delete(np.arange(Class2), np.append(train_index2, val_index2))

idx2 = np.random.choice(np.arange(Class3), size = train3, replace = False)
train_index3 = np.array(idx2)
val_index3 = np.random.choice(np.delete(np.arange(Class3), train_index3), size = val3, replace = False)
test_index3 = np.delete(np.arange(Class3), np.append(train_index3, val_index3))

idx3 = np.random.choice(np.arange(Class4), size = train4, replace = False)
train_index4 = np.array(idx3)
val_index4 = np.random.choice(np.delete(np.arange(Class4), train_index4), size = val4, replace = False)
test_index4 = np.delete(np.arange(Class4), np.append(train_index4, val_index4))

idx4 = np.random.choice(np.arange(Class5), size = train5, replace = False)
train_index5 = np.array(idx4)
val_index5 = np.random.choice(np.delete(np.arange(Class5), train_index5), size = val5, replace = False)
test_index5 = np.delete(np.arange(Class5), np.append(train_index5, val_index5))

idx5 = np.random.choice(np.arange(Class6), size = train6, replace = False)
train_index6 = np.array(idx5)
val_index6 = np.random.choice(np.delete(np.arange(Class6), train_index6), size = val6, replace = False)
test_index6 = np.delete(np.arange(Class6), np.append(train_index6, val_index6))


print("train_index1 =",list(train_index1))
print("val_index1 =",list(val_index1))
print("test_index1 =",list(test_index1))

print("train_index2 =",list(train_index2))
print("val_index2 =",list(val_index2))
print("test_index2 =",list(test_index2))

print("train_index3 =",list(train_index3))
print("val_index3 =",list(val_index3))
print("test_index3 =",list(test_index3))

print("train_index4 =",list(train_index4))
print("val_index4 =",list(val_index4))
print("test_index4 =",list(test_index4))

print("train_index5 =",list(train_index5))
print("val_index5 =",list(val_index5))
print("test_index5 =",list(test_index5))

print("train_index6 =",list(train_index6))
print("val_index6 =",list(val_index6))
print("test_index6 =",list(test_index6))



#确认训练集，验证集，测试集区
train_index1 = [1203, 157, 1196, 962, 1226, 1121, 668, 913, 924, 205, 322, 1148, 1439, 1514, 915, 530, 381, 184, 1154, 1488, 747, 1273, 50, 67, 1193, 124, 912, 947, 1362, 427, 1409, 1275, 1018, 219, 859, 146, 371, 141, 844, 88, 1082, 1497, 515, 443, 1130, 621, 776, 97, 226, 317, 1144, 900, 108, 737, 294, 1174, 904, 199, 714, 671, 96, 725, 1337, 1465, 234, 531, 1189, 1438, 1165, 1372, 944, 489, 1453, 1216, 269, 1133, 485, 1429, 837, 142, 1210, 748, 1339, 547, 753, 1491, 155, 585, 1520, 1287, 412, 148, 331, 1048, 1414, 719, 283, 1283, 695, 320, 710, 273, 1075, 853, 348, 425, 1067, 955, 1146, 813, 46, 379, 1307, 386, 169, 1329, 260, 1357, 1200, 171, 0, 694, 285, 431, 980, 1433, 420, 1214, 206, 986, 133, 561, 1466, 236, 1371, 1311, 756, 958, 439, 1320, 578, 1486, 927, 615, 791, 1422, 1050, 483, 158, 542, 309, 1426, 24, 564, 1319, 1471, 777, 1209, 1297, 170, 1476, 637, 105, 180, 1134, 383, 527, 1156, 140, 1463, 1457, 1096, 972, 103, 1461, 534, 145, 1350, 1308, 1294, 445, 919, 1405, 580, 1014, 796, 1449, 545, 1395, 1468, 519, 638, 1407, 1182, 1344, 651, 76, 1291, 1511, 818, 1421, 863, 321, 1424, 858, 1446, 1190, 1377, 1355, 739, 658, 702, 867, 208, 731, 259, 943, 976, 674, 706, 1015, 1416, 1199, 1505, 1379, 1266, 713, 866, 911, 1532, 223, 245, 1093, 1458, 45, 661, 241, 1185, 315, 677, 676, 1064, 1131, 765, 390, 1090, 512, 810, 1155, 849, 452, 782, 1364, 1076, 231, 941, 1129, 1222, 1027, 404, 200, 593, 808, 339, 587, 1325, 602, 1041, 1459, 440, 116, 1417, 479, 945, 840, 494, 1175, 1135, 411, 888, 287, 1233, 1152, 1124, 8, 1356, 848, 15, 1412, 72, 960, 949, 740, 997, 1149, 951, 1295, 699, 480, 499, 1248, 601, 1396, 106, 51, 1400, 1237, 355, 174, 1145, 1410, 18, 940, 663, 1002, 684, 64, 1108, 730, 1201, 359, 1374, 529, 1447, 1188, 1164, 1109, 1363, 1445, 1091, 886, 271, 112, 998, 653, 595, 1087, 1010, 965, 228, 353, 114, 1347, 925, 751, 1494, 1523, 1213, 767, 991, 328, 422, 1270, 1247, 937, 475, 1042, 1316, 2, 1074, 1399, 847, 516, 783, 62, 633, 1255, 870, 518, 1118, 121, 1397, 1241, 66, 1000, 478, 909, 1500, 801, 1047, 758, 1403, 1277, 969, 1112, 113, 717, 221, 1172, 723, 644, 967, 1423, 201, 44, 1132, 461, 979, 1394, 1178, 528, 1268, 620, 1276, 358, 1147, 679, 775, 254, 1017, 125, 501, 795, 579, 277, 727, 1323, 902, 421, 43, 1055, 468, 122, 162, 495, 1023, 134, 229, 540, 1166, 426, 327, 645, 164, 786, 831, 1151, 32, 1167, 278, 216, 104, 393, 987, 946, 375, 855, 966, 952, 1198, 1005, 1089, 892, 418, 1230, 40, 1192, 1402, 772, 506, 220, 1218, 881, 1493, 1176, 521, 1472, 430, 1080, 1025, 507, 1202, 1, 1427, 611, 1011, 1460, 827, 484, 1263, 1229, 473, 693, 1440, 549, 890, 573, 319, 284, 432, 636, 603, 1244, 1455, 735, 990, 19, 802, 447, 1303, 1036, 610, 1330, 1326, 198, 1191, 626, 242, 131, 550, 894, 117, 1333, 194, 1481, 794, 1183, 1492, 41, 251, 1431, 1257, 1425, 6, 428, 338, 257, 1038, 1518, 1495, 413, 571, 1340, 732, 165, 466, 402, 1401, 598, 1341, 1163, 834, 752, 1387, 1284, 433, 830, 650, 362, 1186, 1123, 1480, 1099, 437, 150, 613, 1499, 509, 1385, 975, 33, 553, 789, 446, 415, 1225, 465, 1482, 60, 1496, 843, 1428, 576, 49, 1304, 115, 1464, 898, 1507, 1217, 248, 1352, 583, 607, 984, 928, 132, 126, 704, 696, 183, 1031, 779, 1060, 754, 481, 856, 996, 372, 451, 806, 1452, 657, 1004, 306, 1343, 687, 401, 1306, 361, 305, 1515, 814, 1408, 316, 1373, 255, 609, 680, 1526, 1378, 196, 597, 1072, 42, 139, 1289, 882, 1239, 964, 841, 377, 1413, 901, 292, 1450, 1366, 742, 1013, 929, 917, 345, 688, 566, 1451, 471, 152, 394, 1114, 312, 460, 280, 456, 552, 308, 572, 38, 263, 605, 880, 1184, 614, 934, 336, 187, 616, 163, 1081, 1265, 868, 525, 1390, 745, 1314, 1142, 1478, 556, 959, 1040, 1312, 286, 213, 457, 885, 1528, 691, 1227, 1524, 799, 1368, 378, 1039, 175, 190, 203, 297, 630, 1088, 762, 1264, 1113, 21, 160, 836, 7, 340, 584, 591, 496, 1367, 290, 878, 243, 1138, 995, 1473, 16, 360, 227, 326, 1502, 382, 555, 391, 5, 1315, 249, 1206, 343, 1092, 36, 1044, 1531, 458, 464, 835, 861, 335, 258, 250, 950, 300, 166, 82, 195, 734, 618, 1234, 809, 770, 98, 476, 771, 1128, 1260, 80, 1336, 922, 1262, 181, 368, 1071, 1161, 569, 1332, 1513]
val_index1 = [204, 1100, 1136, 832, 279, 1272, 323, 176, 842, 168, 798, 351, 455, 817, 757, 4, 643, 488, 1030, 1380, 930, 538, 1348, 217, 860, 910, 869, 590, 1219, 376, 812, 356, 1454, 760, 820, 1253, 71, 738, 804, 1503, 48, 1158, 1083, 829, 1519, 1094, 604, 392, 246, 274, 1137, 766, 218, 1224, 535, 733, 1197, 875, 1529, 708, 773, 1021, 673, 144, 191, 624, 1448, 1504, 1256, 1159, 874, 369, 25, 642, 1232, 634, 130, 559, 449, 1066, 185, 90, 78, 914, 532, 1258, 275, 1012, 135, 1296, 819, 851, 893, 503, 302, 397, 872, 57, 574, 1285, 1345, 1006, 640, 405, 1252, 296, 1349, 1522, 1240, 178, 330, 307, 3, 1342, 1116, 586, 884, 95, 147, 1028, 289, 797, 281, 454, 1194, 346, 1485, 785, 491, 332, 1376, 1359, 1032, 1102, 989, 1521, 589, 482, 1369, 1530, 750, 768, 1286, 444, 707, 749, 1354, 1212, 1235, 648, 1437, 988, 567, 1290, 84, 1444, 85, 1310, 318, 100, 172, 407, 474, 179, 629, 675, 417, 22, 543, 167, 1238, 1334, 380, 374, 399, 1026, 207, 647, 942, 854, 938, 729, 577, 1346, 197, 639, 1383, 1393, 54, 1498, 994, 678, 1249, 656, 276, 225, 442, 1117, 1517, 47, 689, 1288, 907, 623, 247, 17, 1007, 596, 467, 724, 1033, 903, 1392, 744, 701, 825, 1483, 434, 957, 193, 1245, 792, 1208, 370, 926, 252, 477, 599, 1139, 1009, 1441, 1508, 73, 803, 55, 261, 423, 933, 1119, 511, 899, 1035, 1169, 364, 1456, 970, 1370, 79, 562, 253, 1443, 463, 352, 905, 1430, 490, 1375, 682, 575, 1251, 891, 617, 622, 761, 551, 156, 541, 435, 406, 876, 1278, 1361, 1358, 12, 414, 357, 692, 1127, 29, 728, 1432, 83, 1360, 1420, 568, 654, 389, 409, 1086, 683, 936, 664, 138, 1054, 192, 459, 838, 563, 487, 513, 681, 37, 923, 505, 1085, 436]
test_index1 = [9, 10, 11, 13, 14, 20, 23, 26, 27, 28, 30, 31, 34, 35, 39, 52, 53, 56, 58, 59, 61, 63, 65, 68, 69, 70, 74, 75, 77, 81, 86, 87, 89, 91, 92, 93, 94, 99, 101, 102, 107, 109, 110, 111, 118, 119, 120, 123, 127, 128, 129, 136, 137, 143, 149, 151, 153, 154, 159, 161, 173, 177, 182, 186, 188, 189, 202, 209, 210, 211, 212, 214, 215, 222, 224, 230, 232, 233, 235, 237, 238, 239, 240, 244, 256, 262, 264, 265, 266, 267, 268, 270, 272, 282, 288, 291, 293, 295, 298, 299, 301, 303, 304, 310, 311, 313, 314, 324, 325, 329, 333, 334, 337, 341, 342, 344, 347, 349, 350, 354, 363, 365, 366, 367, 373, 384, 385, 387, 388, 395, 396, 398, 400, 403, 408, 410, 416, 419, 424, 429, 438, 441, 448, 450, 453, 462, 469, 470, 472, 486, 492, 493, 497, 498, 500, 502, 504, 508, 510, 514, 517, 520, 522, 523, 524, 526, 533, 536, 537, 539, 544, 546, 548, 554, 557, 558, 560, 565, 570, 581, 582, 588, 592, 594, 600, 606, 608, 612, 619, 625, 627, 628, 631, 632, 635, 641, 646, 649, 652, 655, 659, 660, 662, 665, 666, 667, 669, 670, 672, 685, 686, 690, 697, 698, 700, 703, 705, 709, 711, 712, 715, 716, 718, 720, 721, 722, 726, 736, 741, 743, 746, 755, 759, 763, 764, 769, 774, 778, 780, 781, 784, 787, 788, 790, 793, 800, 805, 807, 811, 815, 816, 821, 822, 823, 824, 826, 828, 833, 839, 845, 846, 850, 852, 857, 862, 864, 865, 871, 873, 877, 879, 883, 887, 889, 895, 896, 897, 906, 908, 916, 918, 920, 921, 931, 932, 935, 939, 948, 953, 954, 956, 961, 963, 968, 971, 973, 974, 977, 978, 981, 982, 983, 985, 992, 993, 999, 1001, 1003, 1008, 1016, 1019, 1020, 1022, 1024, 1029, 1034, 1037, 1043, 1045, 1046, 1049, 1051, 1052, 1053, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1065, 1068, 1069, 1070, 1073, 1077, 1078, 1079, 1084, 1095, 1097, 1098, 1101, 1103, 1104, 1105, 1106, 1107, 1110, 1111, 1115, 1120, 1122, 1125, 1126, 1140, 1141, 1143, 1150, 1153, 1157, 1160, 1162, 1168, 1170, 1171, 1173, 1177, 1179, 1180, 1181, 1187, 1195, 1204, 1205, 1207, 1211, 1215, 1220, 1221, 1223, 1228, 1231, 1236, 1242, 1243, 1246, 1250, 1254, 1259, 1261, 1267, 1269, 1271, 1274, 1279, 1280, 1281, 1282, 1292, 1293, 1298, 1299, 1300, 1301, 1302, 1305, 1309, 1313, 1317, 1318, 1321, 1322, 1324, 1327, 1328, 1331, 1335, 1338, 1351, 1353, 1365, 1381, 1382, 1384, 1386, 1388, 1389, 1391, 1398, 1404, 1406, 1411, 1415, 1418, 1419, 1434, 1435, 1436, 1442, 1462, 1467, 1469, 1470, 1474, 1475, 1477, 1479, 1484, 1487, 1489, 1490, 1501, 1506, 1509, 1510, 1512, 1516, 1525, 1527]
train_index2 = [516, 560, 616, 409, 121, 306, 698, 515, 267, 613, 331, 585, 459, 502, 174, 29, 100, 189, 636, 379, 48, 28, 491, 136, 26, 442, 45, 424, 600, 59, 446, 25, 503, 90, 196, 106, 375, 27, 508, 255, 427, 42, 664, 138, 34, 236, 258, 175, 127, 523, 112, 239, 422, 276, 601, 178, 256, 618, 299, 327, 682, 268, 79, 55, 83, 553, 484, 20, 690, 522, 322, 525, 84, 227, 671, 519, 548, 297, 399, 468, 320, 232, 649, 332, 360, 594, 63, 172, 107, 37, 437, 113, 404, 445, 680, 5, 333, 280, 234, 612, 632, 242, 314, 414, 477, 694, 185, 188, 344, 97, 367, 582, 104, 204, 30, 571, 119, 495, 372, 342, 205, 195, 641, 426, 140, 384, 211, 534, 265, 492, 176, 214, 154, 652, 142, 241, 579, 598, 282, 639, 98, 339, 155, 144, 615, 500, 691, 385, 479, 635, 631, 450, 620, 217, 312, 466, 413, 326, 662, 374, 12, 341, 650, 264, 15, 478, 614, 60, 697, 410, 455, 449, 135, 586, 362, 420, 499, 642, 689, 678, 120, 470, 243, 596, 9, 496, 501, 572, 389, 406, 351, 168, 663, 542, 507, 225, 251, 681, 218, 393, 357, 460, 118, 361, 535, 94, 660, 302, 165, 672, 505, 655, 193, 398, 467, 696, 464, 617, 688, 52, 610, 305, 488, 657, 668, 417, 599, 231, 607, 356, 558, 216, 221, 472, 421, 654, 550, 354, 7, 96, 40, 273, 530, 506, 512, 433, 110, 456, 190, 684, 125, 246, 171, 538, 673, 646, 293, 552, 303, 457, 126, 510, 566, 403, 210, 281, 547, 1, 101, 481, 6, 686, 61, 336, 244, 570, 91, 352, 208, 401, 595, 666, 402, 82, 656, 647, 200, 630, 567, 247, 238, 47, 346, 283, 435, 532, 416, 31, 58, 386, 537, 418, 209, 485, 531, 92, 181, 203, 132, 279, 628, 328, 182, 434, 593, 369, 590, 38, 425, 50, 431, 588, 57, 289, 397, 573, 396, 345, 284, 661, 87, 643, 128, 555, 447, 224, 275, 569, 81, 70, 150, 651, 528, 311, 514, 559, 577, 316, 248, 423, 634]
val_index2 = [169, 19, 124, 89, 383, 263, 400, 290, 131, 111, 141, 187, 509, 163, 77, 391, 291, 701, 419, 261, 51, 498, 451, 603, 363, 129, 368, 212, 700, 438, 633, 602, 133, 14, 624, 192, 74, 335, 665, 480, 388, 65, 170, 667, 526, 8, 16, 285, 676, 638, 296, 49, 348, 137, 474, 146, 376, 524, 597, 347, 35, 536, 308, 184, 66, 412, 679, 229, 692, 149, 390, 543, 54, 252, 226, 439, 315, 462, 504, 304, 702, 44, 645, 230, 683, 465, 441, 269, 159, 589, 648, 337, 444, 161, 294, 539, 584, 145, 95, 115, 609, 587, 511, 592, 563, 73, 527, 173, 677, 167, 358, 254, 674, 366, 64, 520, 334, 463, 381, 494, 147, 487, 206, 324, 86, 105, 556, 41, 194, 278, 262, 370, 10, 122, 658, 219, 461, 274, 521, 2]
test_index2 = [0, 3, 4, 11, 13, 17, 18, 21, 22, 23, 24, 32, 33, 36, 39, 43, 46, 53, 56, 62, 67, 68, 69, 71, 72, 75, 76, 78, 80, 85, 88, 93, 99, 102, 103, 108, 109, 114, 116, 117, 123, 130, 134, 139, 143, 148, 151, 152, 153, 156, 157, 158, 160, 162, 164, 166, 177, 179, 180, 183, 186, 191, 197, 198, 199, 201, 202, 207, 213, 215, 220, 222, 223, 228, 233, 235, 237, 240, 245, 249, 250, 253, 257, 259, 260, 266, 270, 271, 272, 277, 286, 287, 288, 292, 295, 298, 300, 301, 307, 309, 310, 313, 317, 318, 319, 321, 323, 325, 329, 330, 338, 340, 343, 349, 350, 353, 355, 359, 364, 365, 371, 373, 377, 378, 380, 382, 387, 392, 394, 395, 405, 407, 408, 411, 415, 428, 429, 430, 432, 436, 440, 443, 448, 452, 453, 454, 458, 469, 471, 473, 475, 476, 482, 483, 486, 489, 490, 493, 497, 513, 517, 518, 529, 533, 540, 541, 544, 545, 546, 549, 551, 554, 557, 561, 562, 564, 565, 568, 574, 575, 576, 578, 580, 581, 583, 591, 604, 605, 606, 608, 611, 619, 621, 622, 623, 625, 626, 627, 629, 637, 640, 644, 653, 659, 669, 670, 675, 685, 687, 693, 695, 699]
train_index3 = [734, 181, 76, 87, 538, 1124, 905, 708, 508, 597, 81, 250, 853, 944, 1303, 315, 856, 630, 654, 974, 941, 1113, 1031, 121, 265, 697, 41, 822, 611, 819, 1234, 360, 645, 686, 818, 1149, 1002, 677, 252, 127, 1156, 662, 536, 620, 9, 841, 933, 1097, 391, 129, 300, 761, 1000, 1167, 390, 4, 399, 109, 307, 896, 1029, 935, 820, 486, 897, 438, 954, 787, 997, 875, 587, 128, 747, 333, 646, 858, 950, 1255, 764, 408, 1248, 910, 760, 90, 53, 418, 1130, 1075, 240, 376, 395, 972, 344, 1154, 353, 1279, 1055, 155, 739, 28, 246, 369, 701, 520, 306, 975, 1163, 491, 385, 387, 367, 797, 289, 1093, 34, 359, 617, 1152, 1176, 338, 384, 1131, 321, 649, 308, 647, 850, 835, 479, 331, 119, 1311, 341, 661, 553, 141, 1017, 605, 1018, 804, 477, 281, 1114, 609, 917, 361, 388, 1194, 994, 798, 837, 295, 569, 1315, 1161, 829, 653, 456, 1280, 632, 124, 607, 669, 574, 58, 1249, 51, 699, 424, 345, 899, 652, 949, 147, 305, 1141, 1233, 434, 953, 727, 1242, 989, 492, 962, 534, 938, 375, 161, 178, 1117, 807, 264, 96, 1060, 325, 1338, 1168, 784, 748, 612, 235, 775, 1007, 895, 684, 287, 280, 888, 1297, 437, 919, 488, 1257, 401, 1086, 32, 839, 449, 1230, 182, 806, 435, 1162, 1182, 755, 294, 247, 1006, 1026, 351, 892, 758, 870, 873, 1339, 864, 406, 849, 1116, 1231, 1256, 912, 1121, 191, 223, 805, 3, 982, 75, 35, 1260, 1313, 230, 444, 312, 885, 297, 463, 736, 794, 57, 173, 197, 939, 571, 1051, 86, 1125, 852, 440, 1215, 1084, 1070, 884, 840, 212, 855, 169, 29, 222, 494, 1096, 1301, 242, 383, 326, 1331, 530, 678, 193, 78, 1271, 1241, 532, 900, 1204, 266, 1108, 205, 898, 414, 636, 655, 396, 503, 502, 724, 55, 374, 400, 1054, 894, 681, 1064, 186, 455, 276, 600, 765, 464, 546, 732, 1300, 1067, 759, 1005, 423, 453, 555, 2, 317, 157, 441, 1188, 425, 319, 1160, 563, 236, 459, 1195, 922, 770, 1350, 1210, 1050, 918, 1028, 1043, 1276, 469, 730, 1266, 37, 1250, 624, 329, 756, 15, 290, 1228, 621, 39, 47, 1291, 854, 1169, 582, 566, 717, 356, 394, 1293, 879, 393, 188, 111, 802, 1080, 1305, 474, 513, 14, 403, 882, 71, 545, 550, 334, 187, 568, 773, 487, 283, 926, 82, 1063, 1186, 595, 1107, 1193, 518, 1087, 1319, 1135, 370, 528, 562, 866, 1145, 1046, 1223, 498, 368, 103, 874, 712, 373, 412, 482, 722, 102, 634, 1225, 1083, 728, 631, 275, 200, 844, 1237, 88, 268, 184, 603, 311, 618, 969, 97, 529, 1033, 683, 202, 493, 112, 559, 1208, 604, 70, 572, 1024, 725, 589, 241, 1240, 1110, 1198, 860, 466, 216, 687, 1157, 978, 302, 521, 968, 815, 1077, 22, 25, 26, 691, 1088, 33, 1164, 255, 260, 1030, 156, 551, 1042, 1205, 971, 410, 231, 288, 1216, 405, 63, 343, 1213, 909, 537, 481, 476, 472, 1299, 1100, 467, 809, 465, 1040, 540, 778, 1015, 558, 1289, 527, 318, 746, 1177, 1273, 711, 613, 61, 1159, 832, 357, 123, 757, 227, 137, 38, 947, 154, 446, 1327, 1226, 862, 788, 404, 581, 1307, 940, 1073, 229, 886, 702, 750, 1016, 780, 1229, 957, 365, 323, 1272, 92, 1138, 658, 1207, 303, 745, 339, 77, 808, 1332, 1011, 220, 1179, 1236, 185, 827, 409, 366, 1290, 380, 510, 1254, 1346, 1092, 45, 172, 98, 95, 1296, 324, 795, 79, 556, 149, 877, 27, 824, 1027, 6, 598, 130, 19, 876, 1181, 772, 177, 1102, 398, 576, 1309, 347, 723, 615, 1247, 776, 485, 204, 1112, 126, 577, 916, 0, 1103, 1253, 471, 199, 1203, 273, 650, 189, 69, 1343, 259, 1143, 959, 601, 1342, 379, 533, 1076, 1329, 1275, 1232, 842, 1294, 525, 990, 447, 411, 1192, 160, 468, 692, 433, 769, 10, 731, 1184, 622, 1317, 511, 672, 238, 682, 958, 596, 218, 122, 1282, 813, 348, 150, 1211, 1035, 946, 1047, 976, 1222, 30, 371, 606, 277, 167, 286, 279, 992, 117, 543, 680, 648, 718, 162, 363]
val_index3 = [560, 920, 113, 1244, 998, 872, 1072, 443, 179, 462, 1074, 163, 484, 110, 421, 1302, 140, 871, 251, 1349, 1245, 190, 448, 915, 125, 495, 689, 233, 663, 224, 698, 868, 881, 291, 726, 1246, 548, 36, 213, 426, 349, 637, 1095, 1197, 907, 50, 640, 754, 706, 932, 1089, 1185, 1133, 865, 461, 567, 1322, 256, 1306, 1022, 372, 664, 961, 539, 310, 1347, 1251, 955, 956, 633, 629, 659, 638, 257, 1258, 751, 1261, 7, 263, 786, 642, 927, 143, 826, 1321, 332, 924, 791, 419, 1341, 59, 211, 743, 857, 320, 766, 1, 1220, 1174, 1180, 505, 552, 1287, 458, 869, 923, 913, 1151, 100, 1059, 937, 174, 407, 210, 594, 422, 1101, 902, 203, 810, 328, 688, 48, 1023, 1265, 696, 514, 1335, 1324, 337, 139, 1140, 483, 221, 196, 1132, 352, 925, 814, 106, 1214, 1206, 966, 799, 1252, 261, 1277, 1344, 340, 1082, 499, 779, 914, 1337, 1008, 973, 673, 170, 439, 1238, 861, 253, 336, 450, 943, 1165, 91, 801, 1292, 694, 293, 107, 931, 785, 522, 564, 209, 1190, 254, 670, 821, 583, 23, 1090, 1019, 292, 526, 489, 557, 690, 1259, 1069, 644, 602, 382, 639, 1351, 248, 1094, 208, 771, 590, 948, 217, 930, 1183, 44, 830, 981, 1111, 1104, 1068, 851, 782, 1316, 570, 592, 1158, 1318, 1219, 1268, 304, 1148, 5, 713, 515, 523, 1136, 17, 987, 623, 715, 1062, 991, 1049, 591, 979, 13, 740, 85, 777, 1085, 996, 1091, 1014, 101, 1010, 1356, 271, 430, 132, 496, 416, 1036, 783, 1269, 1310, 1044, 627, 977, 695, 1122, 1012, 710, 381, 442, 402, 635, 270, 703, 983]
test_index3 = [8, 11, 12, 16, 18, 20, 21, 24, 31, 40, 42, 43, 46, 49, 52, 54, 56, 60, 62, 64, 65, 66, 67, 68, 72, 73, 74, 80, 83, 84, 89, 93, 94, 99, 104, 105, 108, 114, 115, 116, 118, 120, 131, 133, 134, 135, 136, 138, 142, 144, 145, 146, 148, 151, 152, 153, 158, 159, 164, 165, 166, 168, 171, 175, 176, 180, 183, 192, 194, 195, 198, 201, 206, 207, 214, 215, 219, 225, 226, 228, 232, 234, 237, 239, 243, 244, 245, 249, 258, 262, 267, 269, 272, 274, 278, 282, 284, 285, 296, 298, 299, 301, 309, 313, 314, 316, 322, 327, 330, 335, 342, 346, 350, 354, 355, 358, 362, 364, 377, 378, 386, 389, 392, 397, 413, 415, 417, 420, 427, 428, 429, 431, 432, 436, 445, 451, 452, 454, 457, 460, 470, 473, 475, 478, 480, 490, 497, 500, 501, 504, 506, 507, 509, 512, 516, 517, 519, 524, 531, 535, 541, 542, 544, 547, 549, 554, 561, 565, 573, 575, 578, 579, 580, 584, 585, 586, 588, 593, 599, 608, 610, 614, 616, 619, 625, 626, 628, 641, 643, 651, 656, 657, 660, 665, 666, 667, 668, 671, 674, 675, 676, 679, 685, 693, 700, 704, 705, 707, 709, 714, 716, 719, 720, 721, 729, 733, 735, 737, 738, 741, 742, 744, 749, 752, 753, 762, 763, 767, 768, 774, 781, 789, 790, 792, 793, 796, 800, 803, 811, 812, 816, 817, 823, 825, 828, 831, 833, 834, 836, 838, 843, 845, 846, 847, 848, 859, 863, 867, 878, 880, 883, 887, 889, 890, 891, 893, 901, 903, 904, 906, 908, 911, 921, 928, 929, 934, 936, 942, 945, 951, 952, 960, 963, 964, 965, 967, 970, 980, 984, 985, 986, 988, 993, 995, 999, 1001, 1003, 1004, 1009, 1013, 1020, 1021, 1025, 1032, 1034, 1037, 1038, 1039, 1041, 1045, 1048, 1052, 1053, 1056, 1057, 1058, 1061, 1065, 1066, 1071, 1078, 1079, 1081, 1098, 1099, 1105, 1106, 1109, 1115, 1118, 1119, 1120, 1123, 1126, 1127, 1128, 1129, 1134, 1137, 1139, 1142, 1144, 1146, 1147, 1150, 1153, 1155, 1166, 1170, 1171, 1172, 1173, 1175, 1178, 1187, 1189, 1191, 1196, 1199, 1200, 1201, 1202, 1209, 1212, 1217, 1218, 1221, 1224, 1227, 1235, 1239, 1243, 1262, 1263, 1264, 1267, 1270, 1274, 1278, 1281, 1283, 1284, 1285, 1286, 1288, 1295, 1298, 1304, 1308, 1312, 1314, 1320, 1323, 1325, 1326, 1328, 1330, 1333, 1334, 1336, 1340, 1345, 1348, 1352, 1353, 1354, 1355, 1357]
train_index4 = [473, 582, 520, 593, 438, 446, 345, 73, 285, 389, 341, 546, 329, 306, 442, 104, 606, 585, 350, 519, 316, 474, 332, 564, 102, 307, 322, 458, 195, 246, 99, 206, 267, 358, 180, 586, 480, 252, 478, 176, 489, 203, 537, 501, 185, 225, 197, 51, 1, 27, 581, 29, 45, 558, 181, 418, 232, 324, 620, 48, 14, 42, 46, 82, 212, 393, 128, 247, 383, 371, 448, 318, 434, 80, 525, 444, 38, 148, 58, 53, 264, 535, 13, 114, 311, 240, 427, 415, 22, 561, 452, 90, 214, 129, 200, 611, 491, 281, 380, 112, 251, 410, 91, 165, 157, 64, 460, 86, 171, 28, 436, 543, 429, 490, 31, 276, 57, 550, 194, 579, 215, 597, 439, 242, 507, 137, 381, 74, 560, 583, 40, 116, 106, 508, 571, 468, 598, 319, 71, 422, 457, 220, 255, 301, 237, 412, 269, 456, 98, 268, 299, 348, 591, 321, 154, 577, 445, 375, 291, 466, 494, 464, 85, 113, 503, 279, 613, 245, 399, 408, 188, 361, 411, 428, 623, 309, 76, 459, 280, 3, 419, 605, 440, 483, 8, 135, 65, 305, 425, 122, 423, 213, 256, 556, 298, 349, 432, 9, 339, 290, 505, 173, 403, 331, 144, 130, 486, 50, 79, 143, 435, 614, 125, 580, 117, 343, 377, 510, 366, 261, 538, 47, 127, 516, 49, 21, 362, 441, 35, 224, 19, 563, 616, 390, 517, 388, 351, 314, 266, 193, 152, 164, 554, 372, 347, 263, 608, 226, 617, 296, 155, 511, 244, 401, 96, 132, 55, 387, 462, 209, 590, 484, 373, 572, 355, 5, 354, 333, 529, 567, 397, 315, 506, 191, 534, 619, 295, 236, 221, 162, 335, 303, 382, 599, 621, 289, 533, 201, 357, 163, 182, 481, 147, 404, 420, 59, 368, 365, 470, 588, 541, 568, 499, 108, 625, 379, 575, 248, 302, 463, 141, 465, 126]
val_index4 = [16, 527, 496, 24, 376, 0, 607, 175, 326, 521, 158, 328, 94, 140, 61, 364, 325, 166, 518, 395, 234, 186, 338, 204, 455, 217, 156, 241, 243, 352, 63, 25, 239, 600, 78, 138, 75, 443, 115, 23, 110, 274, 453, 477, 542, 105, 54, 89, 552, 323, 530, 92, 509, 286, 37, 337, 87, 167, 479, 394, 253, 254, 235, 548, 83, 95, 262, 513, 374, 413, 603, 202, 310, 353, 340, 249, 592, 524, 277, 336, 84, 363, 97, 178, 378, 449, 587, 229, 136, 472, 222, 208, 190, 120, 68, 624, 384, 169, 447, 66, 275, 437, 308, 60, 142, 6, 317, 198, 557, 250, 10, 131, 500, 2, 228, 356, 431, 183, 77, 515, 549, 187, 210, 230, 407]
test_index4 = [4, 7, 11, 12, 15, 17, 18, 20, 26, 30, 32, 33, 34, 36, 39, 41, 43, 44, 52, 56, 62, 67, 69, 70, 72, 81, 88, 93, 100, 101, 103, 107, 109, 111, 118, 119, 121, 123, 124, 133, 134, 139, 145, 146, 149, 150, 151, 153, 159, 160, 161, 168, 170, 172, 174, 177, 179, 184, 189, 192, 196, 199, 205, 207, 211, 216, 218, 219, 223, 227, 231, 233, 238, 257, 258, 259, 260, 265, 270, 271, 272, 273, 278, 282, 283, 284, 287, 288, 292, 293, 294, 297, 300, 304, 312, 313, 320, 327, 330, 334, 342, 344, 346, 359, 360, 367, 369, 370, 385, 386, 391, 392, 396, 398, 400, 402, 405, 406, 409, 414, 416, 417, 421, 424, 426, 430, 433, 450, 451, 454, 461, 467, 469, 471, 475, 476, 482, 485, 487, 488, 492, 493, 495, 497, 498, 502, 504, 512, 514, 522, 523, 526, 528, 531, 532, 536, 539, 540, 544, 545, 547, 551, 553, 555, 559, 562, 565, 566, 569, 570, 573, 574, 576, 578, 584, 589, 594, 595, 596, 601, 602, 604, 609, 610, 612, 615, 618, 622]
train_index5 = [416, 503, 285, 339, 553, 348, 470, 28, 436, 541, 673, 344, 66, 12, 131, 9, 531, 612, 289, 44, 29, 258, 616, 594, 706, 565, 620, 490, 23, 201, 60, 204, 401, 687, 327, 265, 560, 156, 48, 155, 486, 379, 606, 533, 92, 141, 542, 281, 538, 200, 213, 78, 262, 569, 378, 386, 405, 629, 108, 535, 604, 279, 61, 132, 170, 450, 105, 624, 202, 57, 178, 496, 389, 615, 650, 398, 525, 231, 704, 125, 646, 163, 320, 267, 85, 589, 400, 372, 275, 658, 370, 451, 7, 173, 229, 458, 602, 423, 49, 632, 640, 72, 45, 587, 482, 126, 643, 336, 409, 89, 572, 653, 261, 164, 34, 476, 20, 506, 700, 174, 556, 651, 508, 529, 678, 623, 617, 685, 272, 240, 210, 18, 697, 242, 540, 434, 243, 566, 209, 610, 382, 3, 510, 349, 308, 655, 603, 99, 116, 70, 276, 570, 390, 143, 635, 321, 38, 214, 403, 361, 110, 63, 324, 347, 580, 43, 305, 626, 393, 138, 312, 412, 668, 387, 228, 323, 701, 79, 681, 54, 273, 220, 443, 473, 46, 426, 428, 576, 427, 680, 577, 478, 460, 355, 81, 698, 230, 557, 447, 669, 467, 474, 252, 394, 195, 30, 425, 634, 547, 627, 419, 186, 410, 621, 471, 190, 359, 630, 534, 260, 133, 340, 402, 702, 137, 98, 134, 555, 663, 97, 512, 373, 83, 297, 369, 5, 36, 287, 352, 73, 237, 360, 683, 222, 27, 77, 193, 277, 15, 699, 689, 446, 47, 118, 318, 357, 351, 501, 306, 551, 368, 158, 645, 599, 472, 274, 667, 206, 113, 254, 546, 88, 422, 194, 455, 657, 591, 528, 75, 350, 14, 652, 432, 175, 661, 494, 666, 590, 102, 511, 16, 130, 417, 374, 144, 431, 601, 332, 366, 442, 545, 600, 477, 255, 64, 168, 459, 448, 485, 517, 598, 181, 187, 504, 654, 367, 124, 625, 408, 492, 595, 223, 502, 421, 17, 147, 162, 161, 216, 530, 180, 371, 388, 25, 584, 543, 480, 466, 296, 686, 611, 139, 703, 562, 537, 414, 696, 69, 385, 219, 690, 22, 121]
val_index5 = [165, 582, 226, 100, 31, 491, 167, 290, 303, 509, 227, 248, 10, 280, 184, 249, 86, 172, 524, 520, 633, 507, 263, 608, 488, 225, 331, 691, 0, 251, 358, 301, 452, 439, 120, 159, 487, 392, 561, 583, 302, 656, 454, 292, 239, 42, 579, 235, 286, 84, 58, 391, 479, 176, 128, 514, 101, 245, 518, 578, 154, 343, 304, 593, 481, 461, 39, 150, 483, 8, 241, 257, 179, 253, 189, 127, 581, 567, 74, 259, 693, 695, 307, 95, 688, 464, 420, 311, 337, 489, 536, 238, 19, 270, 278, 453, 211, 33, 313, 330, 140, 328, 424, 295, 188, 149, 648, 111, 294, 526, 208, 574, 205, 437, 671, 418, 291, 21, 465, 215, 550, 182, 53, 607, 346, 647, 62, 549, 52, 197, 288, 40, 559, 548, 338, 136, 112, 441, 284, 345, 221]
test_index5 = [1, 2, 4, 6, 11, 13, 24, 26, 32, 35, 37, 41, 50, 51, 55, 56, 59, 65, 67, 68, 71, 76, 80, 82, 87, 90, 91, 93, 94, 96, 103, 104, 106, 107, 109, 114, 115, 117, 119, 122, 123, 129, 135, 142, 145, 146, 148, 151, 152, 153, 157, 160, 166, 169, 171, 177, 183, 185, 191, 192, 196, 198, 199, 203, 207, 212, 217, 218, 224, 232, 233, 234, 236, 244, 246, 247, 250, 256, 264, 266, 268, 269, 271, 282, 283, 293, 298, 299, 300, 309, 310, 314, 315, 316, 317, 319, 322, 325, 326, 329, 333, 334, 335, 341, 342, 353, 354, 356, 362, 363, 364, 365, 375, 376, 377, 380, 381, 383, 384, 395, 396, 397, 399, 404, 406, 407, 411, 413, 415, 429, 430, 433, 435, 438, 440, 444, 445, 449, 456, 457, 462, 463, 468, 469, 475, 484, 493, 495, 497, 498, 499, 500, 505, 513, 515, 516, 519, 521, 522, 523, 527, 532, 539, 544, 552, 554, 558, 563, 564, 568, 571, 573, 575, 585, 586, 588, 592, 596, 597, 605, 609, 613, 614, 618, 619, 622, 628, 631, 636, 637, 638, 639, 641, 642, 644, 649, 659, 660, 662, 664, 665, 670, 672, 674, 675, 676, 677, 679, 682, 684, 692, 694, 705]
train_index6 = [899, 534, 1410, 323, 324, 230, 916, 1223, 706, 351, 974, 826, 845, 68, 901, 329, 1380, 552, 995, 587, 251, 519, 373, 1299, 712, 483, 1180, 1077, 999, 996, 51, 1507, 754, 568, 176, 368, 446, 119, 1439, 1362, 672, 1190, 875, 1327, 1349, 1126, 50, 1173, 1081, 832, 4, 641, 1085, 248, 1248, 557, 1290, 229, 113, 1444, 76, 583, 643, 1385, 435, 753, 579, 928, 100, 1464, 1258, 460, 1296, 679, 1053, 518, 1097, 1417, 456, 180, 389, 541, 702, 228, 635, 331, 1174, 1247, 1030, 293, 834, 991, 494, 1330, 133, 202, 630, 1050, 827, 561, 718, 343, 573, 220, 1063, 751, 283, 768, 793, 1502, 929, 1179, 436, 1214, 187, 1015, 1383, 1235, 614, 1228, 197, 533, 526, 619, 694, 1187, 940, 1102, 953, 670, 150, 757, 825, 1208, 934, 687, 294, 184, 567, 636, 1204, 1309, 501, 743, 1458, 18, 548, 236, 1452, 820, 812, 607, 1253, 1312, 1175, 1405, 1171, 391, 455, 1104, 1350, 1127, 576, 654, 935, 1375, 756, 515, 947, 255, 800, 157, 807, 1136, 933, 1052, 1002, 1032, 379, 615, 512, 956, 1332, 1503, 1138, 1474, 880, 511, 648, 683, 148, 1314, 250, 297, 704, 167, 979, 794, 997, 1267, 337, 724, 393, 299, 778, 938, 1364, 564, 903, 1151, 655, 1318, 1088, 33, 699, 1056, 317, 777, 1302, 397, 1012, 930, 45, 27, 890, 907, 1039, 485, 507, 1447, 668, 1326, 246, 863, 682, 861, 1075, 1203, 1278, 961, 680, 605, 452, 849, 782, 1297, 225, 1219, 725, 1116, 790, 1119, 946, 1329, 457, 1071, 127, 1331, 101, 1212, 1177, 752, 1038, 442, 1303, 586, 1184, 1084, 1178, 652, 857, 1211, 102, 965, 1147, 833, 1477, 458, 1134, 1233, 414, 66, 110, 1020, 529, 200, 55, 625, 493, 1113, 966, 1242, 1183, 560, 394, 302, 183, 1239, 1118, 404, 158, 332, 689, 1076, 998, 769, 384, 893, 1501, 476, 217, 477, 606, 104, 433, 952, 592, 431, 821, 252, 1286, 491, 1255, 390, 1232, 235, 550, 1265, 403, 489, 352, 366, 1421, 280, 125, 987, 1369, 666, 1430, 226, 360, 28, 1009, 1295, 889, 75, 1404, 1027, 943, 633, 320, 392, 1407, 245, 887, 1374, 1463, 799, 1019, 145, 677, 611, 714, 1461, 989, 1321, 1080, 1188, 982, 664, 1121, 530, 1108, 1055, 1006, 215, 708, 749, 1185, 278, 915, 313, 878, 810, 690, 377, 1225, 1089, 505, 448, 19, 1300, 1167, 1193, 663, 327, 36, 545, 556, 1294, 1008, 205, 1043, 604, 554, 1234, 1391, 1412, 97, 461, 532, 136, 1279, 950, 951, 971, 525, 1446, 224, 509, 1442, 598, 291, 993, 1045, 1486, 1040, 1122, 1129, 89, 88, 894, 920, 620, 1120, 1246, 1000, 543, 914, 149, 1305, 193, 969, 538, 973, 1298, 569, 608, 314, 242, 697, 1270, 913, 155, 864, 1416, 361, 498, 146, 1451, 513, 836, 1483, 656, 82, 467, 469, 1036, 818, 347, 426, 884, 6, 281, 117, 275, 1393, 850, 31, 249, 279, 695, 1466, 1306, 52, 713, 740, 508, 1044, 111, 773, 788, 1241, 1054, 1389, 1394, 748, 503, 24, 1291, 1023, 438, 865, 959, 1352, 428, 1356, 11, 1423, 1455, 1017, 829, 856, 1059, 1409, 1230, 1319, 1062, 629, 1347, 957, 1485, 1308, 814, 198, 750, 115, 161, 985, 427, 544, 897, 9, 173, 1272, 151, 642, 163, 481, 572, 1133, 1194, 1469, 1484, 284, 1236, 988, 830, 678, 967, 382, 131, 122, 439, 195, 1379, 980, 840, 321, 1304, 290, 1468, 381, 1322, 12, 524, 135, 316, 1262, 92, 551, 1373, 23, 21, 40, 211, 1091, 709, 744, 1438, 169, 322, 514, 1436, 1130, 1488, 475, 707, 1433, 1307, 305, 1201, 292, 504, 1083, 288, 949, 222, 1095, 172, 480, 1492, 123, 114, 417, 1218, 703, 395, 349, 272, 338, 267, 906, 1285, 839, 589, 1263, 824, 1195, 1079, 139, 47, 143, 407, 924, 464, 553, 1164, 1301, 165, 182, 785, 646, 1142, 129, 79, 1401, 1010, 948, 380, 700, 1276, 1470, 771, 330, 65, 86, 124, 38, 1411, 262, 1210, 1429, 325, 303, 1197, 1143, 1037, 869, 1392, 471, 1068, 1284, 1139, 904, 357, 308, 1222, 1313, 53, 517, 492, 618, 558, 1493, 62, 1471, 1414, 375, 1320, 867, 667, 0, 234, 976, 722, 733, 1132, 1100, 1244, 1165, 1351, 1251, 595, 1445, 1472, 192, 3, 675, 737, 1443, 1106, 56, 334, 739, 14, 1357, 1192, 673, 1335, 94, 459, 141, 628, 1467, 1137, 1125, 260, 621, 1378, 154, 319, 613, 258, 881, 1425, 1160, 723, 1022, 1, 1240, 112, 445, 203, 472, 212, 179, 256, 1396, 30, 523, 1498, 32, 336, 1480, 356, 698, 1399, 188, 59, 644, 1342, 1066, 166]
val_index6 = [1146, 720, 540, 1117, 616, 1157, 1144, 1072, 580, 735, 776, 1440, 152, 1150, 761, 900, 932, 547, 676, 1382, 437, 372, 1450, 1087, 566, 301, 309, 247, 383, 238, 1406, 286, 20, 1496, 734, 805, 178, 478, 854, 565, 311, 416, 71, 374, 376, 539, 684, 1209, 742, 74, 1001, 896, 1424, 15, 1333, 779, 882, 1384, 1016, 432, 1376, 726, 1336, 108, 1257, 96, 958, 1505, 1400, 873, 1325, 479, 209, 745, 1245, 296, 1154, 214, 402, 285, 1198, 364, 73, 118, 177, 918, 1288, 1448, 78, 1354, 363, 1061, 1372, 1358, 1078, 1070, 411, 1090, 520, 581, 1057, 1005, 1014, 1280, 1427, 1453, 902, 61, 1481, 1371, 992, 1368, 796, 575, 1328, 132, 1360, 46, 650, 926, 1135, 597, 441, 454, 681, 767, 1311, 1018, 85, 758, 910, 705, 1479, 1086, 37, 1172, 623, 627, 237, 468, 1283, 221, 1292, 1269, 160, 1216, 719, 105, 600, 1250, 1217, 1341, 239, 862, 1363, 1387, 774, 1073, 1462, 1007, 490, 1482, 342, 91, 350, 1105, 1282, 496, 190, 1428, 835, 1289, 257, 318, 852, 631, 64, 868, 588, 276, 162, 354, 34, 1112, 701, 142, 400, 1124, 423, 851, 1224, 98, 333, 1215, 93, 603, 546, 144, 662, 1504, 763, 1051, 223, 120, 449, 736, 213, 63, 1274, 1268, 8, 660, 1459, 612, 923, 842, 7, 207, 870, 813, 1069, 775, 164, 960, 1259, 201, 669, 1064, 994, 792, 1141, 140, 871, 609, 410, 90, 420, 535, 495, 1231, 421, 585, 1238, 1145, 1310, 728, 295, 266, 1377, 1465, 208, 1478, 1199, 67, 692, 1388, 1370, 422, 413, 941, 398, 277, 185, 453, 5, 1316, 729, 637, 574, 1323, 888, 462, 759, 578, 216, 1499, 1021, 1041, 77, 1158, 577, 937, 353, 1094, 253, 798, 1042, 401, 876, 990, 848, 931, 1170, 219, 1060, 465, 1013, 634, 686, 872, 447]
test_index6 = [2, 10, 13, 16, 17, 22, 25, 26, 29, 35, 39, 41, 42, 43, 44, 48, 49, 54, 57, 58, 60, 69, 70, 72, 80, 81, 83, 84, 87, 95, 99, 103, 106, 107, 109, 116, 121, 126, 128, 130, 134, 137, 138, 147, 153, 156, 159, 168, 170, 171, 174, 175, 181, 186, 189, 191, 194, 196, 199, 204, 206, 210, 218, 227, 231, 232, 233, 240, 241, 243, 244, 254, 259, 261, 263, 264, 265, 268, 269, 270, 271, 273, 274, 282, 287, 289, 298, 300, 304, 306, 307, 310, 312, 315, 326, 328, 335, 339, 340, 341, 344, 345, 346, 348, 355, 358, 359, 362, 365, 367, 369, 370, 371, 378, 385, 386, 387, 388, 396, 399, 405, 406, 408, 409, 412, 415, 418, 419, 424, 425, 429, 430, 434, 440, 443, 444, 450, 451, 463, 466, 470, 473, 474, 482, 484, 486, 487, 488, 497, 499, 500, 502, 506, 510, 516, 521, 522, 527, 528, 531, 536, 537, 542, 549, 555, 559, 562, 563, 570, 571, 582, 584, 590, 591, 593, 594, 596, 599, 601, 602, 610, 617, 622, 624, 626, 632, 638, 639, 640, 645, 647, 649, 651, 653, 657, 658, 659, 661, 665, 671, 674, 685, 688, 691, 693, 696, 710, 711, 715, 716, 717, 721, 727, 730, 731, 732, 738, 741, 746, 747, 755, 760, 762, 764, 765, 766, 770, 772, 780, 781, 783, 784, 786, 787, 789, 791, 795, 797, 801, 802, 803, 804, 806, 808, 809, 811, 815, 816, 817, 819, 822, 823, 828, 831, 837, 838, 841, 843, 844, 846, 847, 853, 855, 858, 859, 860, 866, 874, 877, 879, 883, 885, 886, 891, 892, 895, 898, 905, 908, 909, 911, 912, 917, 919, 921, 922, 925, 927, 936, 939, 942, 944, 945, 954, 955, 962, 963, 964, 968, 970, 972, 975, 977, 978, 981, 983, 984, 986, 1003, 1004, 1011, 1024, 1025, 1026, 1028, 1029, 1031, 1033, 1034, 1035, 1046, 1047, 1048, 1049, 1058, 1065, 1067, 1074, 1082, 1092, 1093, 1096, 1098, 1099, 1101, 1103, 1107, 1109, 1110, 1111, 1114, 1115, 1123, 1128, 1131, 1140, 1148, 1149, 1152, 1153, 1155, 1156, 1159, 1161, 1162, 1163, 1166, 1168, 1169, 1176, 1181, 1182, 1186, 1189, 1191, 1196, 1200, 1202, 1205, 1206, 1207, 1213, 1220, 1221, 1226, 1227, 1229, 1237, 1243, 1249, 1252, 1254, 1256, 1260, 1261, 1264, 1266, 1271, 1273, 1275, 1277, 1281, 1287, 1293, 1315, 1317, 1324, 1334, 1337, 1338, 1339, 1340, 1343, 1344, 1345, 1346, 1348, 1353, 1355, 1359, 1361, 1365, 1366, 1367, 1381, 1386, 1390, 1395, 1397, 1398, 1402, 1403, 1408, 1413, 1415, 1418, 1419, 1420, 1422, 1426, 1431, 1432, 1434, 1435, 1437, 1441, 1449, 1454, 1456, 1457, 1460, 1473, 1475, 1476, 1487, 1489, 1490, 1491, 1494, 1495, 1497, 1500, 1506]
W = getRandom(m * K) * 100
W=[0.020005990525343614, 0.027290627996763517, 0.004232202963682796, 0.10933071087029898, 0.03449135031395123, 0.031653703776871434, 0.015471087139622941, 0.025706683575328466, 0.014709911439822358, 0.04013156355053639, 0.04440788933667722, 0.04440377497128624, 0.016051655970327337, 0.10682146012293371, 0.017231697987588983, 0.0553014060382238, 0.00845311185777557, 0.01690648788175698, 0.010613697275551944, 0.05506943122814596, 0.06400145679234556, 0.06617740536126265, 0.06019960164295756, 0.046511726360436045, 0.0034531533176193094, 0.005133009525141748, 0.08411653917622643, 0.16293656748484658, 0.014630234675663614, 0.04605060045403922, 0.006294322150627532, 0.09468486965328499, 0.030464435943102396, 0.05094638635233854, 0.03176338609035746, 0.022467280160379452, 0.028136267504196975, 0.01812817655181595, 0.028272711772547275, 0.026161070588171333, 0.1855479437033632, 0.06035088764892997, 0.11780668384694921, 0.0749978969450306, 0.007831836709017109, 0.05203168727941995, 6.859594730095543e-05, 0.006124792886207056, 0.03047939236608017, 0.1464943194262779, 0.011392334542286086, 0.09609262501072177, 0.02573263676761154, 0.199819750378188, 0.12162530299932559, 0.008445348669742813, 0.021633476556714895, 0.007948697486624376, 0.08393024838042962, 0.07262507124250853, 0.05073780135329268, 5.344803622216509e-05, 0.06958886285430117, 0.00045084075059925266, 0.06087821718249015, 0.020870067276734825, 0.02448577773157074, 0.022129886252128757, 0.0422233506079213, 0.08519724709912471, 0.14504860428320884, 0.12083576655075519, 0.016146078129604877, 0.012455526919070174, 0.028430910677535705, 0.004148806508124478, 0.019319127767797695, 0.0564764633894422, 0.04040103650706429, 0.00966684055722955, 0.020401489973694613, 0.01070944179933642, 0.059104499386188114, 0.04144032221836015, 0.008277598699302873, 0.020220349127596758, 0.02245919111709285, 0.07026660629089089, 0.04934747996160561, 0.06376224313369162, 0.03791386526293619, 0.07682356436500741, 0.028202722666465434, 0.03459995383505414, 0.019555854860906063, 0.04951557677239985, 0.022452214177632216, 0.008729202502517637, 0.049640415489777115, 0.006007560732423828, 0.1045589578955574, 0.098884074302067, 0.022046579031523187, 0.0073372440480247315, 0.02195063672912042, 0.017788271230435183, 0.002458385775875971, 0.006294008214290591, 0.02592993314216478, 0.028908887788297914, 0.042269232841346246, 0.015307207355631382, 0.012744933860044591, 0.05301264532492908, 0.03900839687432351, 0.09912255498561823, 0.022230788598334106, 0.003400312698532773, 0.08933946068393867, 0.038820340885831965, 0.016777471155609278, 0.0839289432868915, 0.04115101975941013, 0.007274068609920846, 0.0019156200877255337, 0.006349596157539399, 0.019820117516628873, 0.00743792708523327, 0.00263917998768202, 0.015041072789857739, 0.002795029891998214, 0.038446369053203484, 0.020513307689755744, 0.05119527434285982, 0.0034111063076294568, 0.011454682125685598, 0.003362875272354973, 0.034236926266601034, 0.061669410599108965, 0.0030400932705887096, 0.05904018988484884, 0.02964106360149505, 0.04952052856498767, 0.022081712539137044, 0.025225977382613222, 0.017737609896211766, 0.0710578796934738, 0.2229223360028752, 0.019008121033685182, 0.08926285925136998, 0.07599856609585223, 0.0032919198833225717, 0.15869431598920386, 0.0009024298623924653, 0.006541885895044619, 0.024099701204980624, 0.1145813224820531, 0.03585337956622723, 0.012262464898538626, 0.0406454832444356, 0.0394820392549604, 0.017446668843030175, 0.040693942748157255, 0.00932110131337988, 0.02479116294610576, 0.07098185653912759, 0.017355445305931416, 0.02178138337228723, 0.012070214765880632, 0.05256343567448944, 0.012250101455831231, 0.013734390285916775, 0.062423650712152404, 0.10354566038376532, 0.007301506458707603, 0.006540431135310363, 0.0341531243355142, 0.21122889811514872, 0.08287258138035039, 0.031908812119390846, 0.00020352263039215968, 0.0028516212323137567, 0.030479052052894903, 0.033651948478527205, 0.1323596966437832, 0.027533721583437844, 0.04700490890996661, 0.02798549700061051, 0.0014422744955474047, 0.05343451125704165, 0.03586809298149947, 0.018081202334175754, 0.04110359021876951, 0.00801448282197314, 0.07894536865104758, 0.0439849019534192, 0.003917694217902375, 0.09735700776758155, 0.08795649279312763, 0.040263500821091536, 0.0016851251257998766, 0.05371603375618365, 0.02994376686025648, 0.02730460338030933, 0.0002831632069122906, 0.005248367446423715, 0.002547398288668467, 0.0029833727521901407, 0.028702818190520285, 0.011143840003689988, 0.016070915739071746, 0.01223395922097142, 0.00022865889208944164, 0.011860609932729178, 0.02089633422166247, 0.023286627017336213, 0.003666397405337901, 0.014133675118707893, 0.028905303691727436, 0.023405856654603492, 0.01704101190953106, 0.007029309651074518, 0.052025804306201635, 0.0913322094370651, 0.039325976263911336, 0.027102125988498135, 0.010000688368609421, 0.017272737964270004, 0.008680516762009902, 0.015998331427418574, 0.005553441182970865, 0.022195184600048094, 0.039205157612841886, 0.09100366323026561, 0.038907172314980025, 0.03101544457754527, 0.12139119409009712, 0.07125246036514502, 0.04565377058242037, 0.018686793556782804, 0.03849378438272825, 0.038742642778720776, 0.004052356296302405, 0.04556538981139356, 0.04281148305166528, 0.03660646192052687, 0.12499668347681941, 0.030578652756125514, 0.03883819769208202, 0.015446849759584798, 0.03455176730631876, 0.06449973520570705]


# 求类1的分组情况
NewArray1 = np.ones((Class1, T + 1))
# 第0组
W1 = W[0:len1]
for i in range(0, Class1):
    add1 = 0
    for j in range(0, len1):
        add1 += W1[j] * X[i, G1[j]]
    NewArray1[i][0] = add1
# 第1组
W2 = W[len1:len1+len2]
for i in range(0, Class1):
    add2 = 0
    for j in range(0, len2):
        add2 += W2[j] * X[i, G2[j]]
    NewArray1[i][1] = add2
# 第2组
W3 = W[len1+len2:len1+len2+len3]
for i in range(0, Class1):
    add3 = 0
    for j in range(0, len3):
        add3 += W3[j] * X[i, G3[j]]
    NewArray1[i][2] = add3
# print(NewArray1)

# 求类2的分组情况
NewArray2 = np.ones((Class2, T + 1)) * 2
# 第0组
W4 = W[split:split+len1]
for i in range(Class1, Class1 + Class2):
    add1 = 0
    for j in range(0, len1):
        add1 += W4[j] * X[i, G1[j]]
    NewArray2[i - Class1][0] = add1
# 第1组
W5 = W[split+len1:split+len1+len2]
for i in range(Class1, Class1 + Class2):
    add2 = 0
    for j in range(0, len2):
        add2 += W5[j] * X[i, G2[j]]
    NewArray2[i - Class1][1] = add2
# 第2组
W6 = W[split+len1+len2:split+len1+len2+len3]
for i in range(Class1, Class1 + Class2):
    add3 = 0
    for j in range(0, len3):
        add3 += W6[j] * X[i, G3[j]]
    NewArray2[i - Class1][2] = add3
# print(NewArray2)

# 求类3的分组情况
NewArray3 = np.ones((Class3, T + 1)) * 3
# 第0组
W7 = W[split*2:split*2+len1]
for i in range(Class1 + Class2, Class1 + Class2 + Class3):
    add1 = 0
    for j in range(0, len1):
        add1 += W7[j] * X[i, G1[j]]
    NewArray3[i - Class1 - Class2][0] = add1
# 第1组
W8 = W[split*2+len1:split*2+len1+len2]
for i in range(Class1 + Class2, Class1 + Class2 + Class3):
    add2 = 0
    for j in range(0, len2):
        add2 += W8[j] * X[i, G2[j]]
    NewArray3[i - Class1 - Class2][1] = add2
# 第2组
W9 = W[split*2+len1+len2:split*2+len1+len2+len3]
for i in range(Class1 + Class2, Class1 + Class2 + Class3):
    add3 = 0
    for j in range(0, len3):
        add3 += W9[j] * X[i, G3[j]]
    NewArray3[i - Class1 - Class2][2] = add3
# print(NewArray3)

# 求类4的分组情况
NewArray4 = np.ones((Class4, T + 1)) * 4
# 第0组
W10 = W[split*3:split*3+len1]
for i in range(Class1 + Class2 + Class3, Class1 + Class2 + Class3 + Class4):
    add1 = 0
    for j in range(0, len1):
        add1 += W10[j] * X[i, G1[j]]
    NewArray4[i - Class1 - Class2 - Class3][0] = add1
# 第1组
W11 = W[split*3+len1:split*3+len1+len2]
for i in range(Class1 + Class2 + Class3, Class1 + Class2 + Class3 + Class4):
    add2 = 0
    for j in range(0, len2):
        add2 += W11[j] * X[i, G2[j]]
    NewArray4[i - Class1 - Class2 - Class3][1] = add2
# 第2组
W12 = W[split*3+len1+len2:split*3+len1+len2+len3]
for i in range(Class1 + Class2 + Class3, Class1 + Class2 + Class3 + Class4):
    add3 = 0
    for j in range(0, len3):
        add3 += W12[j] * X[i, G3[j]]
    NewArray4[i - Class1 - Class2 - Class3][2] = add3
# print(NewArray4)

# 求类5的分组情况
NewArray5 = np.ones((Class5, T + 1)) * 5
# 第0组
W13 = W[split*4:split*4+len1]
for i in range(Class1 + Class2 + Class3 + Class4, Class1 + Class2 + Class3 + Class4 + Class5):
    add1 = 0
    for j in range(0, len1):
        add1 += W13[j] * X[i, G1[j]]
    NewArray5[i - Class1 - Class2 - Class3 - Class4][0] = add1
# 第1组
W14 = W[split*4+len1:split*4+len1+len2]
for i in range(Class1 + Class2 + Class3 + Class4, Class1 + Class2 + Class3 + Class4 + Class5):
    add2 = 0
    for j in range(0, len2):
        add2 += W14[j] * X[i, G2[j]]
    NewArray5[i - Class1 - Class2 - Class3 - Class4][1] = add2
# 第2组
W15 = W[split*4+len1+len2:split*4+len1+len2+len3]
for i in range(Class1 + Class2 + Class3 + Class4, Class1 + Class2 + Class3 + Class4 + Class5):
    add3 = 0
    for j in range(0, len3):
        add3 += W15[j] * X[i, G3[j]]
    NewArray5[i - Class1 - Class2 - Class3 - Class4][2] = add3
# print(NewArray5)

# 求类6的分组情况
NewArray6 = np.ones((Class6, T + 1)) * 7
# 第0组
W16 = W[split*5:split*5+len1]
for i in range(Class1 + Class2 + Class3 + Class4 + Class5, Class1 + Class2 + Class3 + Class4 + Class5 + Class6):
    add1 = 0
    for j in range(0, len1):
        add1 += W16[j] * X[i, G1[j]]
    NewArray6[i - Class1 - Class2 - Class3 - Class4 - Class5][0] = add1
# 第1组
W17 = W[split*5+len1:split*5+len1+len2]
for i in range(Class1 + Class2 + Class3 + Class4 + Class5, Class1 + Class2 + Class3 + Class4 + Class5 + Class6):
    add2 = 0
    for j in range(0, len2):
        add2 += W17[j] * X[i, G2[j]]
    NewArray6[i - Class1 - Class2 - Class3 - Class4 - Class5][1] = add2
# 第2组
W18 = W[split*5+len1+len2:split*5+len1+len2+len3]
for i in range(Class1 + Class2 + Class3 + Class4 + Class5, Class1 + Class2 + Class3 + Class4 + Class5 + Class6):
    add3 = 0
    for j in range(0, len3):
        add3 += W18[j] * X[i, G3[j]]
    NewArray6[i - Class1 - Class2 - Class3 - Class4 - Class5][2] = add3

# 合并两个数组，得到真正的合并数据结果
NewArray = np.vstack((NewArray1,NewArray2,NewArray3,NewArray4,NewArray5,NewArray6))
print(NewArray)

# 随机抽取样本训练集和测试集样本
#print(X)
X1 = NewArray[0:Class1, :]
X2 = NewArray[Class1:num2, :]
X3 = NewArray[num2:num3, :]
X4 = NewArray[num3:num4, :]
# print(X4)
X5 = NewArray[num4:num5, :]
# print(X5)
X6 = NewArray[num5:num6, :]

Data1 = X1[train_index1, :]
Data2 = X2[train_index2, :]
Data3 = X3[train_index3, :]
Data4 = X4[train_index4, :]
Data5 = X5[train_index5, :]
Data6 = X6[train_index6, :]

trainSet=np.vstack((Data1,Data2,Data3,Data4,Data5,Data6))
Y=trainSet[:,T]
trainSet=np.delete(trainSet,T,axis = 1)

testSet1 = np.delete(X1[test_index1, :], T, axis = 1)
testSet2 = np.delete(X2[test_index2, :], T, axis = 1)
testSet3 = np.delete(X3[test_index3, :], T, axis = 1)
testSet4 = np.delete(X4[test_index4, :], T, axis = 1)
testSet5 = np.delete(X5[test_index5, :], T, axis = 1)
testSet6 = np.delete(X6[test_index6, :], T, axis = 1)

trainSet1 = np.delete(Data1, T, axis = 1)
trainSet2 = np.delete(Data2, T, axis = 1)
trainSet3 = np.delete(Data3, T, axis = 1)
trainSet4 = np.delete(Data4, T, axis = 1)
trainSet5 = np.delete(Data5, T, axis = 1)
trainSet6 = np.delete(Data6, T, axis = 1)

valSet1=np.delete(X1[val_index1,:],T,axis = 1)
valSet2=np.delete(X2[val_index2,:],T,axis = 1)
valSet3=np.delete(X3[val_index3,:],T,axis = 1)
valSet4=np.delete(X4[val_index4,:],T,axis = 1)
valSet5=np.delete(X5[val_index5,:],T,axis = 1)
valSet6=np.delete(X6[val_index6,:],T,axis = 1)
allval = val1 + val2 + val3 + val4 + val5 + val6
alltest = test1 + test2 + test3 + test4 + test5 + test6
alltrain = train1 + train2 + train3 + train4 + train5 + train6

clf=GaussianNB()

clf.fit(trainSet,Y)

C1=clf.predict(testSet1)
add=sum(C1==1)
print(add)
C2=clf.predict(testSet2)
add1=sum(C2==2)
print(add1)
C3=clf.predict(testSet3)
add2=sum(C3==3)
print(add2)
C4=clf.predict(testSet4)
add3=sum(C4==4)
print(add3)
C5=clf.predict(testSet5)
add4=sum(C5==5)
print(add4)
C6=clf.predict(testSet6)
add5=sum(C6==7)
print(add5)



print("accuracy:{:.2%}".format((add + add1 + add2 + add3 + add4 + add5 ) / (
        test1 + test2 + test3 + test4 + test5 + test6 )))
